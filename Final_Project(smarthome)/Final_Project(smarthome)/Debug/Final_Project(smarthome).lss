
Final_Project(smarthome).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c8  00000296  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000062  00000000  00000000  0000115f  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  000011c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003987  00000000  00000000  000013e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000db2  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013e5  00000000  00000000  00005b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b8  00000000  00000000  00006f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bc  00000000  00000000  000073c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000145d  00000000  00000000  0000787c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00008cd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000fa8  00000fa8  000010fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ADC_voidInit 0000002c  00000e42  00000e42  00000f96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ADC_voidEnable 00000008  00000fa0  00000fa0  000010f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ADC_u8GetResultSync 0000006c  00000a28  00000a28  00000b7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_16 000000de  00000648  00000648  0000079c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.ADC_u8State 00000001  00800094  00800094  00001130  2**0
                  ALLOC
 19 .bss.ADC_u8Index 00000001  00800095  00800095  00001130  2**0
                  ALLOC
 20 .bss.ADC_u8ChainSize 00000001  00800096  00800096  00001130  2**0
                  ALLOC
 21 .bss.ADC_pu8ChainChannel 00000002  0080008c  0080008c  00001130  2**0
                  ALLOC
 22 .bss.ADC_u8ISRState 00000001  00800097  00800097  00001130  2**0
                  ALLOC
 23 .bss.ADC_pvNotificationFunc 00000002  0080008e  0080008e  00001130  2**0
                  ALLOC
 24 .bss.ADC_pu16AsynchConversionResult 00000002  00800090  00800090  00001130  2**0
                  ALLOC
 25 .text.DIO_voidSetPinDirection 000000e0  00000488  00000488  000005dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.DIO_voidSetPinValue 000000e0  00000568  00000568  000006bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.DIO_u8GetPinValue 00000068  00000b6c  00000b6c  00000cc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.DIO_voidSetPortDirection 00000020  00000e6e  00000e6e  00000fc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.DIO_voidSetPortValue 00000020  00000e8e  00000e8e  00000fe2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.PMW_voidInit 00000040  00000d2e  00000d2e  00000e82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.PMW_voidSetDuty 00000004  00000fac  00000fac  00001100  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.CLCD_voidSendFallingEdge 0000002e  00000e14  00000e14  00000f68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.CLCD_voidSendData 0000005a  00000c36  00000c36  00000d8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.CLCD_voidSendCommand 0000005a  00000c90  00000c90  00000de4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.CLCD_voidSendString 00000036  00000dac  00000dac  00000f00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.CLCD_voidSendNumber 0000021e  00000142  00000142  00000296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.CLCD_voidSetPosition 00000044  00000cea  00000cea  00000e3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.CLCD_voidClearScreen 00000014  00000f6e  00000f6e  000010c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.CLCD_voidInit 00000086  0000091c  0000091c  00000a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.KYPD_voidInt 00000062  00000bd4  00000bd4  00000d28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .rodata       00000010  00800060  00000fba  0000110e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 42 .text.KYPD_u8GetPressedKey 00000128  00000360  00000360  000004b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.LED_voidInit 0000000c  00000f94  00000f94  000010e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.LED_voidOn 0000001e  00000eae  00000eae  00001002  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.LED_voidOff 0000001e  00000ecc  00000ecc  00001020  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.LM35_u8GetTemp 000000b4  00000726  00000726  0000087a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.Init_peripherals 0000003e  00000d6e  00000d6e  00000ec2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .progmemx.data 0000007a  000000c8  000000c8  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 49 .text.System_Locked 0000006c  00000a94  00000a94  00000be8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.LED_OFF_ON 000000a0  0000087c  0000087c  000009d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.Check_Password 00000086  000009a2  000009a2  00000af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.Conrol_Motor 0000006c  00000b00  00000b00  00000c54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .data.lm35    00000003  00800086  00000fd5  00001129  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 54 .data.LED1    00000003  00800089  00000fd8  0000112c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 55 .bss.Temp     00000002  00800092  00800092  00001130  2**0
                  ALLOC
 56 .data.try     00000001  00800098  00000fdb  0000112f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 57 .bss.pass_copy 0000000b  00800070  00800070  00001130  2**0
                  ALLOC
 58 .data.pass    0000000b  0080007b  00000fca  0000111e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 59 .text.main    0000001c  00000f08  00000f08  0000105c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.libgcc.mul 0000001e  00000eea  00000eea  0000103e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.libgcc.div 0000001c  00000f24  00000f24  00001078  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.libgcc.div 000000a2  000007da  000007da  0000092e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.libgcc.builtins 00000032  00000de2  00000de2  00000f36  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.libgcc  00000012  00000f82  00000f82  000010d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.libgcc  00000018  00000f40  00000f40  00001094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.__dummy_fini 00000002  00000fb4  00000fb4  00001108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.__dummy_funcs_on_exit 00000002  00000fb6  00000fb6  0000110a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.__dummy_simulator_exit 00000002  00000fb8  00000fb8  0000110c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.exit    00000016  00000f58  00000f58  000010ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text._Exit   00000004  00000fb0  00000fb0  00001104  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
   8:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
   c:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  10:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  14:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  18:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  1c:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  20:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  24:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  28:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  2c:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  30:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  34:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  38:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  3c:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  40:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_16>
  44:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  48:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  4c:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>
  50:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 70       	andi	r16, 0x00	; 0
  58:	00 0f       	add	r16, r16
  5a:	ba 00       	.word	0x00ba	; ????
  5c:	70 00       	.word	0x0070	; ????
  5e:	7b 80       	ldd	r7, Y+3	; 0x03
  60:	00 7b       	andi	r16, 0xB0	; 176
  62:	00 8c       	ldd	r0, Z+24	; 0x18
  64:	00 0f       	add	r16, r16
  66:	ca 00       	.word	0x00ca	; ????
  68:	8c 00       	.word	0x008c	; ????
  6a:	98 80       	ld	r9, Y
  6c:	00 98       	cbi	0x00, 0	; 0
  6e:	00 99       	sbic	0x00, 0	; 0
  70:	00 0f       	add	r16, r16
  72:	db 00       	.word	0x00db	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e4 e5       	ldi	r30, 0x54	; 84
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e3 37       	cpi	r30, 0x73	; 115
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 84 07 	call	0xf08	; 0xf08 <main>
  c0:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

00000fa8 <__bad_interrupt>:
 fa8:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ADC_voidInit:

00000e42 <ADC_voidInit>:
	#if ADC_VREF == AREF
		CLR_BIT(ADMUX , ADMUX_REFS0) ;
		CLR_BIT(ADMUX , ADMUX_REFS1) ;

	#elif ADC_VREF == AVCC
		SET_BIT(ADMUX , ADMUX_REFS0) ;
 e42:	87 b1       	in	r24, 0x07	; 7
 e44:	80 64       	ori	r24, 0x40	; 64
 e46:	87 b9       	out	0x07, r24	; 7
		CLR_BIT(ADMUX , ADMUX_REFS1) ;
 e48:	87 b1       	in	r24, 0x07	; 7
 e4a:	8f 77       	andi	r24, 0x7F	; 127
 e4c:	87 b9       	out	0x07, r24	; 7
	#endif


	/*Set Left Adjust Result*/
	#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
			CLR_BIT(ADMUX , ADMUX_ADLAR) ;
 e4e:	87 b1       	in	r24, 0x07	; 7
 e50:	8f 7d       	andi	r24, 0xDF	; 223
 e52:	87 b9       	out	0x07, r24	; 7
		#error "Wrong ADC_ADJUSTMENT config"
	
	#endif 

	/*Set Prescaler Value*/
	ADSAR &= ADC_PRE_MASK ;
 e54:	86 b1       	in	r24, 0x06	; 6
 e56:	88 7f       	andi	r24, 0xF8	; 248
 e58:	86 b9       	out	0x06, r24	; 6
	ADSAR |= ADC_PRESCALLER ;
 e5a:	86 b1       	in	r24, 0x06	; 6
 e5c:	83 60       	ori	r24, 0x03	; 3
 e5e:	86 b9       	out	0x06, r24	; 6
	
	/*Enable ADC Peripheral*/
	#if ADC_STATUS == ADC_DISABLE
		CLR_BIT(ADSAR , ADSAR_ADEN) ;
	#elif ADC_STATUS == ADC_ENABLE
		SET_BIT(ADSAR , ADSAR_ADEN) ;
 e60:	86 b1       	in	r24, 0x06	; 6
 e62:	80 68       	ori	r24, 0x80	; 128
 e64:	86 b9       	out	0x06, r24	; 6
	#error "Wrong ADC_STATUS config"
	#endif 

	/*Enable ADC Interrupt*/
	#if INT_STATUS == INT_DISABLE
		CLR_BIT(ADSAR , ADSAR_ADIE) ;
 e66:	86 b1       	in	r24, 0x06	; 6
 e68:	87 7f       	andi	r24, 0xF7	; 247
 e6a:	86 b9       	out	0x06, r24	; 6
 e6c:	08 95       	ret

Disassembly of section .text.ADC_voidEnable:

00000fa0 <ADC_voidEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidEnable (void)
{
	SET_BIT(ADSAR , ADSAR_ADEN) ;
 fa0:	86 b1       	in	r24, 0x06	; 6
 fa2:	80 68       	ori	r24, 0x80	; 128
 fa4:	86 b9       	out	0x06, r24	; 6
 fa6:	08 95       	ret

Disassembly of section .text.ADC_u8GetResultSync:

00000a28 <ADC_u8GetResultSync>:

void ADC_u8GetResultSync (u8 Copy_u8Channel , u16 * Copy_pu16Result)
{
	//u8 Local_u8ErrorState = OK ;
	u32 Local_u32TimeoutCounter = 0;
	if (Copy_pu16Result != NULL)
 a28:	61 15       	cp	r22, r1
 a2a:	71 05       	cpc	r23, r1
 a2c:	91 f1       	breq	.+100    	; 0xa92 <ADC_u8GetResultSync+0x6a>
	{
		if (ADC_u8State == IDLE)
 a2e:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <ADC_u8State>
 a32:	91 11       	cpse	r25, r1
 a34:	2e c0       	rjmp	.+92     	; 0xa92 <ADC_u8GetResultSync+0x6a>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY;
 a36:	91 e0       	ldi	r25, 0x01	; 1
 a38:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <ADC_u8State>

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK;		// >> Clear first five in ADMUX bits (11100000)
 a3c:	97 b1       	in	r25, 0x07	; 7
 a3e:	90 7e       	andi	r25, 0xE0	; 224
 a40:	97 b9       	out	0x07, r25	; 7
			ADMUX |= Copy_u8Channel;	// >> Set fisrt five bits in ADMUX with value of channel 
 a42:	97 b1       	in	r25, 0x07	; 7
 a44:	89 2b       	or	r24, r25
 a46:	87 b9       	out	0x07, r24	; 7

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC);
 a48:	86 b1       	in	r24, 0x06	; 6
 a4a:	80 64       	ori	r24, 0x40	; 64
 a4c:	86 b9       	out	0x06, r24	; 6
//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_u8GetResultSync (u8 Copy_u8Channel , u16 * Copy_pu16Result)
{
	//u8 Local_u8ErrorState = OK ;
	u32 Local_u32TimeoutCounter = 0;
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	dc 01       	movw	r26, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC);

			/*Waiting until the conversion is complete*/
			while (((GET_BIT(ADSAR , ADSAR_ADIF)) == 0) && (Local_u32TimeoutCounter < ADC_TIMEOUT))
 a54:	03 c0       	rjmp	.+6      	; 0xa5c <ADC_u8GetResultSync+0x34>
			{
				Local_u32TimeoutCounter++ ;
 a56:	01 96       	adiw	r24, 0x01	; 1
 a58:	a1 1d       	adc	r26, r1
 a5a:	b1 1d       	adc	r27, r1

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC);

			/*Waiting until the conversion is complete*/
			while (((GET_BIT(ADSAR , ADSAR_ADIF)) == 0) && (Local_u32TimeoutCounter < ADC_TIMEOUT))
 a5c:	34 99       	sbic	0x06, 4	; 6
 a5e:	06 c0       	rjmp	.+12     	; 0xa6c <ADC_u8GetResultSync+0x44>
 a60:	80 35       	cpi	r24, 0x50	; 80
 a62:	23 ec       	ldi	r18, 0xC3	; 195
 a64:	92 07       	cpc	r25, r18
 a66:	a1 05       	cpc	r26, r1
 a68:	b1 05       	cpc	r27, r1
 a6a:	a8 f3       	brcs	.-22     	; 0xa56 <ADC_u8GetResultSync+0x2e>
			{
				Local_u32TimeoutCounter++ ;
			}
			if (Local_u32TimeoutCounter == ADC_TIMEOUT)
 a6c:	80 35       	cpi	r24, 0x50	; 80
 a6e:	93 4c       	sbci	r25, 0xC3	; 195
 a70:	a1 05       	cpc	r26, r1
 a72:	b1 05       	cpc	r27, r1
 a74:	61 f0       	breq	.+24     	; 0xa8e <ADC_u8GetResultSync+0x66>
				//Local_u8ErrorState = TIMEOUT_STATE ;
			}
			else
			{
				/*Clear the interrupt flag*/
				SET_BIT(ADSAR , ADSAR_ADIF);	// Must clear flag with your own bcz you don't work with interrupt
 a76:	86 b1       	in	r24, 0x06	; 6
 a78:	80 61       	ori	r24, 0x10	; 16
 a7a:	86 b9       	out	0x06, r24	; 6

				/*Return Conversion Result*/
				#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
					*Copy_pu16Result = (ADCL|(ADCH << 8));
 a7c:	24 b1       	in	r18, 0x04	; 4
 a7e:	85 b1       	in	r24, 0x05	; 5
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	98 2f       	mov	r25, r24
 a84:	88 27       	eor	r24, r24
 a86:	82 2b       	or	r24, r18
 a88:	fb 01       	movw	r30, r22
 a8a:	91 83       	std	Z+1, r25	; 0x01
 a8c:	80 83       	st	Z, r24

				#endif
			}

			/*ADC is IDLE*/
			ADC_u8State = IDLE ;
 a8e:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <ADC_u8State>
 a92:	08 95       	ret

Disassembly of section .text.__vector_16:

00000648 <__vector_16>:

	if (Copy_u8Prescaler < 8)
	{
		/*Set Prescaler Value*/
		ADSAR &= ADC_PRE_MASK ;
		ADSAR |= Copy_u8Prescaler ;
 648:	1f 92       	push	r1
 64a:	0f 92       	push	r0
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	0f 92       	push	r0
 650:	11 24       	eor	r1, r1
 652:	2f 93       	push	r18
 654:	3f 93       	push	r19
 656:	4f 93       	push	r20
 658:	5f 93       	push	r21
 65a:	6f 93       	push	r22
 65c:	7f 93       	push	r23
 65e:	8f 93       	push	r24
 660:	9f 93       	push	r25
 662:	af 93       	push	r26
 664:	bf 93       	push	r27
 666:	ef 93       	push	r30
 668:	ff 93       	push	r31
 66a:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <ADC_u8ISRState>
 66e:	81 11       	cpse	r24, r1
 670:	17 c0       	rjmp	.+46     	; 0x6a0 <__vector_16+0x58>
 672:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <ADC_pu16AsynchConversionResult>
 676:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <ADC_pu16AsynchConversionResult+0x1>
 67a:	24 b1       	in	r18, 0x04	; 4
 67c:	85 b1       	in	r24, 0x05	; 5
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	98 2f       	mov	r25, r24
 682:	88 27       	eor	r24, r24
 684:	82 2b       	or	r24, r18
 686:	91 83       	std	Z+1, r25	; 0x01
 688:	80 83       	st	Z, r24
 68a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <ADC_u8State>
 68e:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <ADC_pvNotificationFunc>
 692:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <ADC_pvNotificationFunc+0x1>
 696:	09 95       	icall
 698:	86 b1       	in	r24, 0x06	; 6
 69a:	87 7f       	andi	r24, 0xF7	; 247
 69c:	86 b9       	out	0x06, r24	; 6
 69e:	32 c0       	rjmp	.+100    	; 0x704 <__vector_16+0xbc>
 6a0:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <ADC_pu16AsynchConversionResult>
 6a4:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <ADC_pu16AsynchConversionResult+0x1>
 6a8:	24 b1       	in	r18, 0x04	; 4
 6aa:	85 b1       	in	r24, 0x05	; 5
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	98 2f       	mov	r25, r24
 6b0:	88 27       	eor	r24, r24
 6b2:	82 2b       	or	r24, r18
 6b4:	91 83       	std	Z+1, r25	; 0x01
 6b6:	80 83       	st	Z, r24
 6b8:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ADC_u8Index>
 6bc:	8f 5f       	subi	r24, 0xFF	; 255
 6be:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <ADC_u8Index>
 6c2:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <ADC_u8ChainSize>
 6c6:	89 13       	cpse	r24, r25
 6c8:	0b c0       	rjmp	.+22     	; 0x6e0 <__vector_16+0x98>
 6ca:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <ADC_u8State>
 6ce:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <ADC_pvNotificationFunc>
 6d2:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <ADC_pvNotificationFunc+0x1>
 6d6:	09 95       	icall
 6d8:	86 b1       	in	r24, 0x06	; 6
 6da:	87 7f       	andi	r24, 0xF7	; 247
 6dc:	86 b9       	out	0x06, r24	; 6
 6de:	12 c0       	rjmp	.+36     	; 0x704 <__vector_16+0xbc>
 6e0:	87 b1       	in	r24, 0x07	; 7
 6e2:	80 7e       	andi	r24, 0xE0	; 224
 6e4:	87 b9       	out	0x07, r24	; 7
 6e6:	97 b1       	in	r25, 0x07	; 7
 6e8:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ADC_u8Index>
 6ec:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <ADC_pu8ChainChannel>
 6f0:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <ADC_pu8ChainChannel+0x1>
 6f4:	e8 0f       	add	r30, r24
 6f6:	f1 1d       	adc	r31, r1
 6f8:	80 81       	ld	r24, Z
 6fa:	89 2b       	or	r24, r25
 6fc:	87 b9       	out	0x07, r24	; 7
 6fe:	86 b1       	in	r24, 0x06	; 6
 700:	80 64       	ori	r24, 0x40	; 64
 702:	86 b9       	out	0x06, r24	; 6
 704:	ff 91       	pop	r31
 706:	ef 91       	pop	r30
 708:	bf 91       	pop	r27
 70a:	af 91       	pop	r26
 70c:	9f 91       	pop	r25
 70e:	8f 91       	pop	r24
 710:	7f 91       	pop	r23
 712:	6f 91       	pop	r22
 714:	5f 91       	pop	r21
 716:	4f 91       	pop	r20
 718:	3f 91       	pop	r19
 71a:	2f 91       	pop	r18
 71c:	0f 90       	pop	r0
 71e:	0f be       	out	0x3f, r0	; 63
 720:	0f 90       	pop	r0
 722:	1f 90       	pop	r1
 724:	18 95       	reti

Disassembly of section .text.DIO_voidSetPinDirection:

00000488 <DIO_voidSetPinDirection>:
	switch(Copy_u8PORT)
	{
		case DIO_PORTA : TOG_BIT(PORTA, Copy_u8PIN);break;
		case DIO_PORTB : TOG_BIT(PORTB, Copy_u8PIN);break;
		case DIO_PORTC : TOG_BIT(PORTC, Copy_u8PIN);break;
		case DIO_PORTD : TOG_BIT(PORTD, Copy_u8PIN);break;
 488:	4f 3f       	cpi	r20, 0xFF	; 255
 48a:	a1 f5       	brne	.+104    	; 0x4f4 <DIO_voidSetPinDirection+0x6c>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	89 f0       	breq	.+34     	; 0x4b2 <DIO_voidSetPinDirection+0x2a>
 490:	28 f0       	brcs	.+10     	; 0x49c <DIO_voidSetPinDirection+0x14>
 492:	82 30       	cpi	r24, 0x02	; 2
 494:	c9 f0       	breq	.+50     	; 0x4c8 <DIO_voidSetPinDirection+0x40>
 496:	83 30       	cpi	r24, 0x03	; 3
 498:	11 f1       	breq	.+68     	; 0x4de <DIO_voidSetPinDirection+0x56>
 49a:	08 95       	ret
 49c:	2a b3       	in	r18, 0x1a	; 26
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_voidSetPinDirection+0x20>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	6a 95       	dec	r22
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_voidSetPinDirection+0x1c>
 4ac:	82 2b       	or	r24, r18
 4ae:	8a bb       	out	0x1a, r24	; 26
 4b0:	08 95       	ret
 4b2:	27 b3       	in	r18, 0x17	; 23
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_voidSetPinDirection+0x36>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	6a 95       	dec	r22
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_voidSetPinDirection+0x32>
 4c2:	82 2b       	or	r24, r18
 4c4:	87 bb       	out	0x17, r24	; 23
 4c6:	08 95       	ret
 4c8:	24 b3       	in	r18, 0x14	; 20
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <DIO_voidSetPinDirection+0x4c>
 4d0:	88 0f       	add	r24, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	6a 95       	dec	r22
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <DIO_voidSetPinDirection+0x48>
 4d8:	82 2b       	or	r24, r18
 4da:	84 bb       	out	0x14, r24	; 20
 4dc:	08 95       	ret
 4de:	21 b3       	in	r18, 0x11	; 17
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_voidSetPinDirection+0x62>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_voidSetPinDirection+0x5e>
 4ee:	82 2b       	or	r24, r18
 4f0:	81 bb       	out	0x11, r24	; 17
 4f2:	08 95       	ret
 4f4:	41 11       	cpse	r20, r1
 4f6:	37 c0       	rjmp	.+110    	; 0x566 <DIO_voidSetPinDirection+0xde>
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	91 f0       	breq	.+36     	; 0x520 <DIO_voidSetPinDirection+0x98>
 4fc:	28 f0       	brcs	.+10     	; 0x508 <DIO_voidSetPinDirection+0x80>
 4fe:	82 30       	cpi	r24, 0x02	; 2
 500:	d9 f0       	breq	.+54     	; 0x538 <DIO_voidSetPinDirection+0xb0>
 502:	83 30       	cpi	r24, 0x03	; 3
 504:	29 f1       	breq	.+74     	; 0x550 <DIO_voidSetPinDirection+0xc8>
 506:	08 95       	ret
 508:	2a b3       	in	r18, 0x1a	; 26
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_voidSetPinDirection+0x8c>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_voidSetPinDirection+0x88>
 518:	80 95       	com	r24
 51a:	82 23       	and	r24, r18
 51c:	8a bb       	out	0x1a, r24	; 26
 51e:	08 95       	ret
 520:	27 b3       	in	r18, 0x17	; 23
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_voidSetPinDirection+0xa4>
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	6a 95       	dec	r22
 52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_voidSetPinDirection+0xa0>
 530:	80 95       	com	r24
 532:	82 23       	and	r24, r18
 534:	87 bb       	out	0x17, r24	; 23
 536:	08 95       	ret
 538:	24 b3       	in	r18, 0x14	; 20
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_voidSetPinDirection+0xbc>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	6a 95       	dec	r22
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_voidSetPinDirection+0xb8>
 548:	80 95       	com	r24
 54a:	82 23       	and	r24, r18
 54c:	84 bb       	out	0x14, r24	; 20
 54e:	08 95       	ret
 550:	21 b3       	in	r18, 0x11	; 17
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_voidSetPinDirection+0xd4>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	6a 95       	dec	r22
 55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_voidSetPinDirection+0xd0>
 560:	80 95       	com	r24
 562:	82 23       	and	r24, r18
 564:	81 bb       	out	0x11, r24	; 17
 566:	08 95       	ret

Disassembly of section .text.DIO_voidSetPinValue:

00000568 <DIO_voidSetPinValue>:
 568:	41 30       	cpi	r20, 0x01	; 1
 56a:	a1 f5       	brne	.+104    	; 0x5d4 <DIO_voidSetPinValue+0x6c>
 56c:	81 30       	cpi	r24, 0x01	; 1
 56e:	89 f0       	breq	.+34     	; 0x592 <DIO_voidSetPinValue+0x2a>
 570:	28 f0       	brcs	.+10     	; 0x57c <DIO_voidSetPinValue+0x14>
 572:	82 30       	cpi	r24, 0x02	; 2
 574:	c9 f0       	breq	.+50     	; 0x5a8 <DIO_voidSetPinValue+0x40>
 576:	83 30       	cpi	r24, 0x03	; 3
 578:	11 f1       	breq	.+68     	; 0x5be <DIO_voidSetPinValue+0x56>
 57a:	08 95       	ret
 57c:	2b b3       	in	r18, 0x1b	; 27
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 c0       	rjmp	.+4      	; 0x588 <DIO_voidSetPinValue+0x20>
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	6a 95       	dec	r22
 58a:	e2 f7       	brpl	.-8      	; 0x584 <DIO_voidSetPinValue+0x1c>
 58c:	82 2b       	or	r24, r18
 58e:	8b bb       	out	0x1b, r24	; 27
 590:	08 95       	ret
 592:	28 b3       	in	r18, 0x18	; 24
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_voidSetPinValue+0x36>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	6a 95       	dec	r22
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_voidSetPinValue+0x32>
 5a2:	82 2b       	or	r24, r18
 5a4:	88 bb       	out	0x18, r24	; 24
 5a6:	08 95       	ret
 5a8:	25 b3       	in	r18, 0x15	; 21
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_voidSetPinValue+0x4c>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	6a 95       	dec	r22
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_voidSetPinValue+0x48>
 5b8:	82 2b       	or	r24, r18
 5ba:	85 bb       	out	0x15, r24	; 21
 5bc:	08 95       	ret
 5be:	22 b3       	in	r18, 0x12	; 18
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_voidSetPinValue+0x62>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_voidSetPinValue+0x5e>
 5ce:	82 2b       	or	r24, r18
 5d0:	82 bb       	out	0x12, r24	; 18
 5d2:	08 95       	ret
 5d4:	41 11       	cpse	r20, r1
 5d6:	37 c0       	rjmp	.+110    	; 0x646 <DIO_voidSetPinValue+0xde>
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	91 f0       	breq	.+36     	; 0x600 <DIO_voidSetPinValue+0x98>
 5dc:	28 f0       	brcs	.+10     	; 0x5e8 <DIO_voidSetPinValue+0x80>
 5de:	82 30       	cpi	r24, 0x02	; 2
 5e0:	d9 f0       	breq	.+54     	; 0x618 <DIO_voidSetPinValue+0xb0>
 5e2:	83 30       	cpi	r24, 0x03	; 3
 5e4:	29 f1       	breq	.+74     	; 0x630 <DIO_voidSetPinValue+0xc8>
 5e6:	08 95       	ret
 5e8:	2b b3       	in	r18, 0x1b	; 27
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <DIO_voidSetPinValue+0x8c>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	6a 95       	dec	r22
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <DIO_voidSetPinValue+0x88>
 5f8:	80 95       	com	r24
 5fa:	82 23       	and	r24, r18
 5fc:	8b bb       	out	0x1b, r24	; 27
 5fe:	08 95       	ret
 600:	28 b3       	in	r18, 0x18	; 24
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_voidSetPinValue+0xa4>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_voidSetPinValue+0xa0>
 610:	80 95       	com	r24
 612:	82 23       	and	r24, r18
 614:	88 bb       	out	0x18, r24	; 24
 616:	08 95       	ret
 618:	25 b3       	in	r18, 0x15	; 21
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_voidSetPinValue+0xbc>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_voidSetPinValue+0xb8>
 628:	80 95       	com	r24
 62a:	82 23       	and	r24, r18
 62c:	85 bb       	out	0x15, r24	; 21
 62e:	08 95       	ret
 630:	22 b3       	in	r18, 0x12	; 18
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_voidSetPinValue+0xd4>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_voidSetPinValue+0xd0>
 640:	80 95       	com	r24
 642:	82 23       	and	r24, r18
 644:	82 bb       	out	0x12, r24	; 18
 646:	08 95       	ret

Disassembly of section .text.DIO_u8GetPinValue:

00000b6c <DIO_u8GetPinValue>:
 b6c:	81 30       	cpi	r24, 0x01	; 1
 b6e:	89 f0       	breq	.+34     	; 0xb92 <DIO_u8GetPinValue+0x26>
 b70:	28 f0       	brcs	.+10     	; 0xb7c <DIO_u8GetPinValue+0x10>
 b72:	82 30       	cpi	r24, 0x02	; 2
 b74:	c9 f0       	breq	.+50     	; 0xba8 <DIO_u8GetPinValue+0x3c>
 b76:	83 30       	cpi	r24, 0x03	; 3
 b78:	11 f1       	breq	.+68     	; 0xbbe <DIO_u8GetPinValue+0x52>
 b7a:	08 95       	ret
 b7c:	89 b3       	in	r24, 0x19	; 25
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	02 c0       	rjmp	.+4      	; 0xb86 <DIO_u8GetPinValue+0x1a>
 b82:	95 95       	asr	r25
 b84:	87 95       	ror	r24
 b86:	6a 95       	dec	r22
 b88:	e2 f7       	brpl	.-8      	; 0xb82 <DIO_u8GetPinValue+0x16>
 b8a:	81 70       	andi	r24, 0x01	; 1
 b8c:	fa 01       	movw	r30, r20
 b8e:	80 83       	st	Z, r24
 b90:	08 95       	ret
 b92:	86 b3       	in	r24, 0x16	; 22
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <DIO_u8GetPinValue+0x30>
 b98:	95 95       	asr	r25
 b9a:	87 95       	ror	r24
 b9c:	6a 95       	dec	r22
 b9e:	e2 f7       	brpl	.-8      	; 0xb98 <DIO_u8GetPinValue+0x2c>
 ba0:	81 70       	andi	r24, 0x01	; 1
 ba2:	fa 01       	movw	r30, r20
 ba4:	80 83       	st	Z, r24
 ba6:	08 95       	ret
 ba8:	83 b3       	in	r24, 0x13	; 19
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_u8GetPinValue+0x46>
 bae:	95 95       	asr	r25
 bb0:	87 95       	ror	r24
 bb2:	6a 95       	dec	r22
 bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_u8GetPinValue+0x42>
 bb6:	81 70       	andi	r24, 0x01	; 1
 bb8:	fa 01       	movw	r30, r20
 bba:	80 83       	st	Z, r24
 bbc:	08 95       	ret
 bbe:	80 b3       	in	r24, 0x10	; 16
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <DIO_u8GetPinValue+0x5c>
 bc4:	95 95       	asr	r25
 bc6:	87 95       	ror	r24
 bc8:	6a 95       	dec	r22
 bca:	e2 f7       	brpl	.-8      	; 0xbc4 <DIO_u8GetPinValue+0x58>
 bcc:	81 70       	andi	r24, 0x01	; 1
 bce:	fa 01       	movw	r30, r20
 bd0:	80 83       	st	Z, r24
 bd2:	08 95       	ret

Disassembly of section .text.DIO_voidSetPortDirection:

00000e6e <DIO_voidSetPortDirection>:
}


void DIO_voidSetPortDirection(u8 Copy_u8PORT, u8 Copy_u8Direction)
{
	switch(Copy_u8PORT)
 e6e:	81 30       	cpi	r24, 0x01	; 1
 e70:	41 f0       	breq	.+16     	; 0xe82 <DIO_voidSetPortDirection+0x14>
 e72:	28 f0       	brcs	.+10     	; 0xe7e <DIO_voidSetPortDirection+0x10>
 e74:	82 30       	cpi	r24, 0x02	; 2
 e76:	39 f0       	breq	.+14     	; 0xe86 <DIO_voidSetPortDirection+0x18>
 e78:	83 30       	cpi	r24, 0x03	; 3
 e7a:	39 f0       	breq	.+14     	; 0xe8a <DIO_voidSetPortDirection+0x1c>
 e7c:	08 95       	ret
	{
		case DIO_PORTA : DDRA = Copy_u8Direction;break;
 e7e:	6a bb       	out	0x1a, r22	; 26
 e80:	08 95       	ret
		case DIO_PORTB : DDRB = Copy_u8Direction;break;
 e82:	67 bb       	out	0x17, r22	; 23
 e84:	08 95       	ret
		case DIO_PORTC : DDRC = Copy_u8Direction;break;
 e86:	64 bb       	out	0x14, r22	; 20
 e88:	08 95       	ret
		case DIO_PORTD : DDRD = Copy_u8Direction;break;
 e8a:	61 bb       	out	0x11, r22	; 17
 e8c:	08 95       	ret

Disassembly of section .text.DIO_voidSetPortValue:

00000e8e <DIO_voidSetPortValue>:
}


void DIO_voidSetPortValue(u8 Copy_u8PORT, u8 Copy_u8Value)
{
	switch(Copy_u8PORT)
 e8e:	81 30       	cpi	r24, 0x01	; 1
 e90:	41 f0       	breq	.+16     	; 0xea2 <DIO_voidSetPortValue+0x14>
 e92:	28 f0       	brcs	.+10     	; 0xe9e <DIO_voidSetPortValue+0x10>
 e94:	82 30       	cpi	r24, 0x02	; 2
 e96:	39 f0       	breq	.+14     	; 0xea6 <DIO_voidSetPortValue+0x18>
 e98:	83 30       	cpi	r24, 0x03	; 3
 e9a:	39 f0       	breq	.+14     	; 0xeaa <DIO_voidSetPortValue+0x1c>
 e9c:	08 95       	ret
	{
		case DIO_PORTA : PORTA = Copy_u8Value;break;
 e9e:	6b bb       	out	0x1b, r22	; 27
 ea0:	08 95       	ret
		case DIO_PORTB : PORTB = Copy_u8Value;break;
 ea2:	68 bb       	out	0x18, r22	; 24
 ea4:	08 95       	ret
		case DIO_PORTC : PORTC = Copy_u8Value;break;
 ea6:	65 bb       	out	0x15, r22	; 21
 ea8:	08 95       	ret
		case DIO_PORTD : PORTD = Copy_u8Value;break;
 eaa:	62 bb       	out	0x12, r22	; 18
 eac:	08 95       	ret

Disassembly of section .text.PMW_voidInit:

00000d2e <PMW_voidInit>:
#include "pmw.h"


void PMW_voidInit()
{
	SET_BIT(SREG , SREG_I);
 d2e:	8f b7       	in	r24, 0x3f	; 63
 d30:	80 68       	ori	r24, 0x80	; 128
 d32:	8f bf       	out	0x3f, r24	; 63
	TCNT0 = TIMERS_U8_PRELOAD_INITIAL_VALUE;
 d34:	12 be       	out	0x32, r1	; 50
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 d36:	4f ef       	ldi	r20, 0xFF	; 255
 d38:	63 e0       	ldi	r22, 0x03	; 3
 d3a:	81 e0       	ldi	r24, 0x01	; 1
 d3c:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>

/*Choose PWM Mode*/
 SET_BIT(TCCR0, TCCR0_WGM00);
 d40:	83 b7       	in	r24, 0x33	; 51
 d42:	80 64       	ori	r24, 0x40	; 64
 d44:	83 bf       	out	0x33, r24	; 51
 SET_BIT(TCCR0, TCCR0_WGM01);
 d46:	83 b7       	in	r24, 0x33	; 51
 d48:	88 60       	ori	r24, 0x08	; 8
 d4a:	83 bf       	out	0x33, r24	; 51

/*Set OC0 on top Clear OC0 on Compare => Non Inverting*/
CLR_BIT(TCCR0, TCCR0_COM00);
 d4c:	83 b7       	in	r24, 0x33	; 51
 d4e:	8f 7e       	andi	r24, 0xEF	; 239
 d50:	83 bf       	out	0x33, r24	; 51
SET_BIT(TCCR0, TCCR0_COM01);
 d52:	83 b7       	in	r24, 0x33	; 51
 d54:	80 62       	ori	r24, 0x20	; 32
 d56:	83 bf       	out	0x33, r24	; 51

OCR0=OCR0_valu_PWM;
 d58:	1c be       	out	0x3c, r1	; 60
#if   TIMER0_PRESCALER   ==  freq_8
CLR_BIT(TCCR0, TCCR0_CS00);
 d5a:	83 b7       	in	r24, 0x33	; 51
 d5c:	8e 7f       	andi	r24, 0xFE	; 254
 d5e:	83 bf       	out	0x33, r24	; 51
SET_BIT(TCCR0, TCCR0_CS01);
 d60:	83 b7       	in	r24, 0x33	; 51
 d62:	82 60       	ori	r24, 0x02	; 2
 d64:	83 bf       	out	0x33, r24	; 51
CLR_BIT(TCCR0, TCCR0_CS02);
 d66:	83 b7       	in	r24, 0x33	; 51
 d68:	8b 7f       	andi	r24, 0xFB	; 251
 d6a:	83 bf       	out	0x33, r24	; 51
 d6c:	08 95       	ret

Disassembly of section .text.PMW_voidSetDuty:

00000fac <PMW_voidSetDuty>:

void PMW_voidSetDuty(u8 Copy_u8DutyCycle )
{

/*Check for mode in PWM*/
OCR0 = Copy_u8DutyCycle;  /*Sets OCR0 value*/
 fac:	8c bf       	out	0x3c, r24	; 60
 fae:	08 95       	ret

Disassembly of section .text.CLCD_voidSendFallingEdge:

00000e14 <CLCD_voidSendFallingEdge>:

		CLCD_voidSendData( LOC_u8Iterator );

	}

}
 e14:	41 e0       	ldi	r20, 0x01	; 1
 e16:	67 e0       	ldi	r22, 0x07	; 7
 e18:	82 e0       	ldi	r24, 0x02	; 2
 e1a:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 e1e:	8f ec       	ldi	r24, 0xCF	; 207
 e20:	97 e0       	ldi	r25, 0x07	; 7
 e22:	01 97       	sbiw	r24, 0x01	; 1
 e24:	f1 f7       	brne	.-4      	; 0xe22 <CLCD_voidSendFallingEdge+0xe>
 e26:	00 c0       	rjmp	.+0      	; 0xe28 <CLCD_voidSendFallingEdge+0x14>
 e28:	00 00       	nop
 e2a:	40 e0       	ldi	r20, 0x00	; 0
 e2c:	67 e0       	ldi	r22, 0x07	; 7
 e2e:	82 e0       	ldi	r24, 0x02	; 2
 e30:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 e34:	8f ec       	ldi	r24, 0xCF	; 207
 e36:	97 e0       	ldi	r25, 0x07	; 7
 e38:	01 97       	sbiw	r24, 0x01	; 1
 e3a:	f1 f7       	brne	.-4      	; 0xe38 <CLCD_voidSendFallingEdge+0x24>
 e3c:	00 c0       	rjmp	.+0      	; 0xe3e <CLCD_voidSendFallingEdge+0x2a>
 e3e:	00 00       	nop
 e40:	08 95       	ret

Disassembly of section .text.CLCD_voidSendData:

00000c36 <CLCD_voidSendData>:
 c36:	cf 93       	push	r28
 c38:	c8 2f       	mov	r28, r24
 c3a:	6f ef       	ldi	r22, 0xFF	; 255
 c3c:	83 e0       	ldi	r24, 0x03	; 3
 c3e:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_voidSetPortDirection>
 c42:	4f ef       	ldi	r20, 0xFF	; 255
 c44:	65 e0       	ldi	r22, 0x05	; 5
 c46:	82 e0       	ldi	r24, 0x02	; 2
 c48:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
 c4c:	4f ef       	ldi	r20, 0xFF	; 255
 c4e:	66 e0       	ldi	r22, 0x06	; 6
 c50:	82 e0       	ldi	r24, 0x02	; 2
 c52:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
 c56:	4f ef       	ldi	r20, 0xFF	; 255
 c58:	67 e0       	ldi	r22, 0x07	; 7
 c5a:	82 e0       	ldi	r24, 0x02	; 2
 c5c:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
 c60:	6c 2f       	mov	r22, r28
 c62:	83 e0       	ldi	r24, 0x03	; 3
 c64:	0e 94 47 07 	call	0xe8e	; 0xe8e <DIO_voidSetPortValue>
 c68:	41 e0       	ldi	r20, 0x01	; 1
 c6a:	65 e0       	ldi	r22, 0x05	; 5
 c6c:	82 e0       	ldi	r24, 0x02	; 2
 c6e:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 c72:	40 e0       	ldi	r20, 0x00	; 0
 c74:	66 e0       	ldi	r22, 0x06	; 6
 c76:	82 e0       	ldi	r24, 0x02	; 2
 c78:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 c7c:	0e 94 0a 07 	call	0xe14	; 0xe14 <CLCD_voidSendFallingEdge>
 c80:	8f ec       	ldi	r24, 0xCF	; 207
 c82:	97 e0       	ldi	r25, 0x07	; 7
 c84:	01 97       	sbiw	r24, 0x01	; 1
 c86:	f1 f7       	brne	.-4      	; 0xc84 <CLCD_voidSendData+0x4e>
 c88:	00 c0       	rjmp	.+0      	; 0xc8a <CLCD_voidSendData+0x54>
 c8a:	00 00       	nop
 c8c:	cf 91       	pop	r28
 c8e:	08 95       	ret

Disassembly of section .text.CLCD_voidSendCommand:

00000c90 <CLCD_voidSendCommand>:
 c90:	cf 93       	push	r28
 c92:	c8 2f       	mov	r28, r24
 c94:	6f ef       	ldi	r22, 0xFF	; 255
 c96:	83 e0       	ldi	r24, 0x03	; 3
 c98:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_voidSetPortDirection>
 c9c:	4f ef       	ldi	r20, 0xFF	; 255
 c9e:	65 e0       	ldi	r22, 0x05	; 5
 ca0:	82 e0       	ldi	r24, 0x02	; 2
 ca2:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
 ca6:	4f ef       	ldi	r20, 0xFF	; 255
 ca8:	66 e0       	ldi	r22, 0x06	; 6
 caa:	82 e0       	ldi	r24, 0x02	; 2
 cac:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
 cb0:	4f ef       	ldi	r20, 0xFF	; 255
 cb2:	67 e0       	ldi	r22, 0x07	; 7
 cb4:	82 e0       	ldi	r24, 0x02	; 2
 cb6:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
 cba:	6c 2f       	mov	r22, r28
 cbc:	83 e0       	ldi	r24, 0x03	; 3
 cbe:	0e 94 47 07 	call	0xe8e	; 0xe8e <DIO_voidSetPortValue>
 cc2:	40 e0       	ldi	r20, 0x00	; 0
 cc4:	65 e0       	ldi	r22, 0x05	; 5
 cc6:	82 e0       	ldi	r24, 0x02	; 2
 cc8:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 ccc:	40 e0       	ldi	r20, 0x00	; 0
 cce:	66 e0       	ldi	r22, 0x06	; 6
 cd0:	82 e0       	ldi	r24, 0x02	; 2
 cd2:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 cd6:	0e 94 0a 07 	call	0xe14	; 0xe14 <CLCD_voidSendFallingEdge>
 cda:	8f ec       	ldi	r24, 0xCF	; 207
 cdc:	97 e0       	ldi	r25, 0x07	; 7
 cde:	01 97       	sbiw	r24, 0x01	; 1
 ce0:	f1 f7       	brne	.-4      	; 0xcde <CLCD_voidSendCommand+0x4e>
 ce2:	00 c0       	rjmp	.+0      	; 0xce4 <CLCD_voidSendCommand+0x54>
 ce4:	00 00       	nop
 ce6:	cf 91       	pop	r28
 ce8:	08 95       	ret

Disassembly of section .text.CLCD_voidSendString:

00000dac <CLCD_voidSendString>:
 dac:	cf 92       	push	r12
 dae:	df 92       	push	r13
 db0:	ef 92       	push	r14
 db2:	cf 93       	push	r28
 db4:	6b 01       	movw	r12, r22
 db6:	e8 2e       	mov	r14, r24
 db8:	c0 e0       	ldi	r28, 0x00	; 0
 dba:	03 c0       	rjmp	.+6      	; 0xdc2 <CLCD_voidSendString+0x16>
 dbc:	0e 94 1b 06 	call	0xc36	; 0xc36 <CLCD_voidSendData>
 dc0:	cf 5f       	subi	r28, 0xFF	; 255
 dc2:	ae 2d       	mov	r26, r14
 dc4:	c6 01       	movw	r24, r12
 dc6:	8c 0f       	add	r24, r28
 dc8:	91 1d       	adc	r25, r1
 dca:	a1 1d       	adc	r26, r1
 dcc:	fc 01       	movw	r30, r24
 dce:	84 91       	lpm	r24, Z
 dd0:	a7 fd       	sbrc	r26, 7
 dd2:	80 81       	ld	r24, Z
 dd4:	81 11       	cpse	r24, r1
 dd6:	f2 cf       	rjmp	.-28     	; 0xdbc <CLCD_voidSendString+0x10>
 dd8:	cf 91       	pop	r28
 dda:	ef 90       	pop	r14
 ddc:	df 90       	pop	r13
 dde:	cf 90       	pop	r12
 de0:	08 95       	ret

Disassembly of section .text.CLCD_voidSendNumber:

00000142 <CLCD_voidSendNumber>:
 142:	2f 92       	push	r2
 144:	3f 92       	push	r3
 146:	4f 92       	push	r4
 148:	5f 92       	push	r5
 14a:	6f 92       	push	r6
 14c:	7f 92       	push	r7
 14e:	8f 92       	push	r8
 150:	9f 92       	push	r9
 152:	af 92       	push	r10
 154:	bf 92       	push	r11
 156:	cf 92       	push	r12
 158:	df 92       	push	r13
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	28 97       	sbiw	r28, 0x08	; 8
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	f8 94       	cli
 170:	de bf       	out	0x3e, r29	; 62
 172:	0f be       	out	0x3f, r0	; 63
 174:	cd bf       	out	0x3d, r28	; 61
 176:	29 83       	std	Y+1, r18	; 0x01
 178:	3a 83       	std	Y+2, r19	; 0x02
 17a:	4b 83       	std	Y+3, r20	; 0x03
 17c:	5c 83       	std	Y+4, r21	; 0x04
 17e:	6d 83       	std	Y+5, r22	; 0x05
 180:	7e 83       	std	Y+6, r23	; 0x06
 182:	38 2e       	mov	r3, r24
 184:	29 2e       	mov	r2, r25
 186:	a0 e0       	ldi	r26, 0x00	; 0
 188:	0e 94 a0 07 	call	0xf40	; 0xf40 <__cmpdi2_s8>
 18c:	09 f0       	breq	.+2      	; 0x190 <CLCD_voidSendNumber+0x4e>
 18e:	81 c0       	rjmp	.+258    	; 0x292 <CLCD_voidSendNumber+0x150>
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 1b 06 	call	0xc36	; 0xc36 <CLCD_voidSendData>
 196:	cb c0       	rjmp	.+406    	; 0x32e <CLCD_voidSendNumber+0x1ec>
 198:	2f 81       	ldd	r18, Y+7	; 0x07
 19a:	38 85       	ldd	r19, Y+8	; 0x08
 19c:	49 2d       	mov	r20, r9
 19e:	58 2d       	mov	r21, r8
 1a0:	67 2d       	mov	r22, r7
 1a2:	76 2d       	mov	r23, r6
 1a4:	85 2d       	mov	r24, r5
 1a6:	94 2d       	mov	r25, r4
 1a8:	01 e0       	ldi	r16, 0x01	; 1
 1aa:	0e 94 f1 06 	call	0xde2	; 0xde2 <__ashldi3>
 1ae:	82 2e       	mov	r8, r18
 1b0:	93 2e       	mov	r9, r19
 1b2:	48 87       	std	Y+8, r20	; 0x08
 1b4:	5f 83       	std	Y+7, r21	; 0x07
 1b6:	b6 2f       	mov	r27, r22
 1b8:	a7 2f       	mov	r26, r23
 1ba:	f8 2f       	mov	r31, r24
 1bc:	e9 2f       	mov	r30, r25
 1be:	02 e0       	ldi	r16, 0x02	; 2
 1c0:	0e 94 f1 06 	call	0xde2	; 0xde2 <__ashldi3>
 1c4:	a2 2e       	mov	r10, r18
 1c6:	b3 2e       	mov	r11, r19
 1c8:	c4 2e       	mov	r12, r20
 1ca:	d5 2e       	mov	r13, r21
 1cc:	e6 2e       	mov	r14, r22
 1ce:	f7 2e       	mov	r15, r23
 1d0:	08 2f       	mov	r16, r24
 1d2:	19 2f       	mov	r17, r25
 1d4:	28 2d       	mov	r18, r8
 1d6:	39 2d       	mov	r19, r9
 1d8:	48 85       	ldd	r20, Y+8	; 0x08
 1da:	5f 81       	ldd	r21, Y+7	; 0x07
 1dc:	6b 2f       	mov	r22, r27
 1de:	7a 2f       	mov	r23, r26
 1e0:	8f 2f       	mov	r24, r31
 1e2:	9e 2f       	mov	r25, r30
 1e4:	0e 94 c1 07 	call	0xf82	; 0xf82 <__adddi3>
 1e8:	28 87       	std	Y+8, r18	; 0x08
 1ea:	3f 83       	std	Y+7, r19	; 0x07
 1ec:	94 2e       	mov	r9, r20
 1ee:	85 2e       	mov	r8, r21
 1f0:	76 2e       	mov	r7, r22
 1f2:	67 2e       	mov	r6, r23
 1f4:	58 2e       	mov	r5, r24
 1f6:	49 2e       	mov	r4, r25
 1f8:	0f 2e       	mov	r0, r31
 1fa:	fa e0       	ldi	r31, 0x0A	; 10
 1fc:	af 2e       	mov	r10, r31
 1fe:	f0 2d       	mov	r31, r0
 200:	b1 2c       	mov	r11, r1
 202:	c1 2c       	mov	r12, r1
 204:	d1 2c       	mov	r13, r1
 206:	e1 2c       	mov	r14, r1
 208:	f1 2c       	mov	r15, r1
 20a:	00 e0       	ldi	r16, 0x00	; 0
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	29 81       	ldd	r18, Y+1	; 0x01
 210:	3a 81       	ldd	r19, Y+2	; 0x02
 212:	4b 81       	ldd	r20, Y+3	; 0x03
 214:	5c 81       	ldd	r21, Y+4	; 0x04
 216:	6d 81       	ldd	r22, Y+5	; 0x05
 218:	7e 81       	ldd	r23, Y+6	; 0x06
 21a:	83 2d       	mov	r24, r3
 21c:	92 2d       	mov	r25, r2
 21e:	0e 94 92 07 	call	0xf24	; 0xf24 <__umoddi3>
 222:	a2 2e       	mov	r10, r18
 224:	b3 2e       	mov	r11, r19
 226:	c4 2e       	mov	r12, r20
 228:	d5 2e       	mov	r13, r21
 22a:	e6 2e       	mov	r14, r22
 22c:	f7 2e       	mov	r15, r23
 22e:	08 2f       	mov	r16, r24
 230:	19 2f       	mov	r17, r25
 232:	28 85       	ldd	r18, Y+8	; 0x08
 234:	3f 81       	ldd	r19, Y+7	; 0x07
 236:	49 2d       	mov	r20, r9
 238:	58 2d       	mov	r21, r8
 23a:	67 2d       	mov	r22, r7
 23c:	76 2d       	mov	r23, r6
 23e:	85 2d       	mov	r24, r5
 240:	94 2d       	mov	r25, r4
 242:	0e 94 c1 07 	call	0xf82	; 0xf82 <__adddi3>
 246:	2f 83       	std	Y+7, r18	; 0x07
 248:	38 87       	std	Y+8, r19	; 0x08
 24a:	94 2e       	mov	r9, r20
 24c:	85 2e       	mov	r8, r21
 24e:	76 2e       	mov	r7, r22
 250:	67 2e       	mov	r6, r23
 252:	58 2e       	mov	r5, r24
 254:	49 2e       	mov	r4, r25
 256:	0f 2e       	mov	r0, r31
 258:	fa e0       	ldi	r31, 0x0A	; 10
 25a:	af 2e       	mov	r10, r31
 25c:	f0 2d       	mov	r31, r0
 25e:	b1 2c       	mov	r11, r1
 260:	c1 2c       	mov	r12, r1
 262:	d1 2c       	mov	r13, r1
 264:	e1 2c       	mov	r14, r1
 266:	f1 2c       	mov	r15, r1
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	29 81       	ldd	r18, Y+1	; 0x01
 26e:	3a 81       	ldd	r19, Y+2	; 0x02
 270:	4b 81       	ldd	r20, Y+3	; 0x03
 272:	5c 81       	ldd	r21, Y+4	; 0x04
 274:	6d 81       	ldd	r22, Y+5	; 0x05
 276:	7e 81       	ldd	r23, Y+6	; 0x06
 278:	83 2d       	mov	r24, r3
 27a:	92 2d       	mov	r25, r2
 27c:	0e 94 94 07 	call	0xf28	; 0xf28 <__udivdi3>
 280:	29 83       	std	Y+1, r18	; 0x01
 282:	3a 83       	std	Y+2, r19	; 0x02
 284:	4b 83       	std	Y+3, r20	; 0x03
 286:	5c 83       	std	Y+4, r21	; 0x04
 288:	6d 83       	std	Y+5, r22	; 0x05
 28a:	7e 83       	std	Y+6, r23	; 0x06
 28c:	38 2e       	mov	r3, r24
 28e:	29 2e       	mov	r2, r25
 290:	09 c0       	rjmp	.+18     	; 0x2a4 <CLCD_voidSendNumber+0x162>
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	18 86       	std	Y+8, r1	; 0x08
 296:	91 2c       	mov	r9, r1
 298:	81 2c       	mov	r8, r1
 29a:	71 2c       	mov	r7, r1
 29c:	61 2c       	mov	r6, r1
 29e:	51 2c       	mov	r5, r1
 2a0:	41 2c       	mov	r4, r1
 2a2:	8f 83       	std	Y+7, r24	; 0x07
 2a4:	29 81       	ldd	r18, Y+1	; 0x01
 2a6:	3a 81       	ldd	r19, Y+2	; 0x02
 2a8:	4b 81       	ldd	r20, Y+3	; 0x03
 2aa:	5c 81       	ldd	r21, Y+4	; 0x04
 2ac:	6d 81       	ldd	r22, Y+5	; 0x05
 2ae:	7e 81       	ldd	r23, Y+6	; 0x06
 2b0:	83 2d       	mov	r24, r3
 2b2:	92 2d       	mov	r25, r2
 2b4:	a0 e0       	ldi	r26, 0x00	; 0
 2b6:	0e 94 a0 07 	call	0xf40	; 0xf40 <__cmpdi2_s8>
 2ba:	09 f0       	breq	.+2      	; 0x2be <CLCD_voidSendNumber+0x17c>
 2bc:	6d cf       	rjmp	.-294    	; 0x198 <CLCD_voidSendNumber+0x56>
 2be:	2b c0       	rjmp	.+86     	; 0x316 <CLCD_voidSendNumber+0x1d4>
 2c0:	0f 2e       	mov	r0, r31
 2c2:	fa e0       	ldi	r31, 0x0A	; 10
 2c4:	af 2e       	mov	r10, r31
 2c6:	f0 2d       	mov	r31, r0
 2c8:	b1 2c       	mov	r11, r1
 2ca:	c1 2c       	mov	r12, r1
 2cc:	d1 2c       	mov	r13, r1
 2ce:	e1 2c       	mov	r14, r1
 2d0:	f1 2c       	mov	r15, r1
 2d2:	00 e0       	ldi	r16, 0x00	; 0
 2d4:	10 e0       	ldi	r17, 0x00	; 0
 2d6:	2f 81       	ldd	r18, Y+7	; 0x07
 2d8:	38 85       	ldd	r19, Y+8	; 0x08
 2da:	49 2d       	mov	r20, r9
 2dc:	58 2d       	mov	r21, r8
 2de:	67 2d       	mov	r22, r7
 2e0:	76 2d       	mov	r23, r6
 2e2:	85 2d       	mov	r24, r5
 2e4:	94 2d       	mov	r25, r4
 2e6:	0e 94 92 07 	call	0xf24	; 0xf24 <__umoddi3>
 2ea:	80 e3       	ldi	r24, 0x30	; 48
 2ec:	82 0f       	add	r24, r18
 2ee:	0e 94 1b 06 	call	0xc36	; 0xc36 <CLCD_voidSendData>
 2f2:	2f 81       	ldd	r18, Y+7	; 0x07
 2f4:	38 85       	ldd	r19, Y+8	; 0x08
 2f6:	49 2d       	mov	r20, r9
 2f8:	58 2d       	mov	r21, r8
 2fa:	67 2d       	mov	r22, r7
 2fc:	76 2d       	mov	r23, r6
 2fe:	85 2d       	mov	r24, r5
 300:	94 2d       	mov	r25, r4
 302:	0e 94 94 07 	call	0xf28	; 0xf28 <__udivdi3>
 306:	2f 83       	std	Y+7, r18	; 0x07
 308:	38 87       	std	Y+8, r19	; 0x08
 30a:	94 2e       	mov	r9, r20
 30c:	85 2e       	mov	r8, r21
 30e:	76 2e       	mov	r7, r22
 310:	67 2e       	mov	r6, r23
 312:	58 2e       	mov	r5, r24
 314:	49 2e       	mov	r4, r25
 316:	2f 81       	ldd	r18, Y+7	; 0x07
 318:	38 85       	ldd	r19, Y+8	; 0x08
 31a:	49 2d       	mov	r20, r9
 31c:	58 2d       	mov	r21, r8
 31e:	67 2d       	mov	r22, r7
 320:	76 2d       	mov	r23, r6
 322:	85 2d       	mov	r24, r5
 324:	94 2d       	mov	r25, r4
 326:	a1 e0       	ldi	r26, 0x01	; 1
 328:	0e 94 a0 07 	call	0xf40	; 0xf40 <__cmpdi2_s8>
 32c:	49 f6       	brne	.-110    	; 0x2c0 <CLCD_voidSendNumber+0x17e>
 32e:	28 96       	adiw	r28, 0x08	; 8
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	bf 90       	pop	r11
 34c:	af 90       	pop	r10
 34e:	9f 90       	pop	r9
 350:	8f 90       	pop	r8
 352:	7f 90       	pop	r7
 354:	6f 90       	pop	r6
 356:	5f 90       	pop	r5
 358:	4f 90       	pop	r4
 35a:	3f 90       	pop	r3
 35c:	2f 90       	pop	r2
 35e:	08 95       	ret

Disassembly of section .text.CLCD_voidSetPosition:

00000cea <CLCD_voidSetPosition>:
 cea:	9f ef       	ldi	r25, 0xFF	; 255
 cec:	98 0f       	add	r25, r24
 cee:	92 30       	cpi	r25, 0x02	; 2
 cf0:	70 f4       	brcc	.+28     	; 0xd0e <CLCD_voidSetPosition+0x24>
 cf2:	61 31       	cpi	r22, 0x11	; 17
 cf4:	70 f4       	brcc	.+28     	; 0xd12 <CLCD_voidSetPosition+0x28>
 cf6:	66 23       	and	r22, r22
 cf8:	71 f0       	breq	.+28     	; 0xd16 <CLCD_voidSetPosition+0x2c>
 cfa:	81 30       	cpi	r24, 0x01	; 1
 cfc:	19 f4       	brne	.+6      	; 0xd04 <CLCD_voidSetPosition+0x1a>
 cfe:	8f e7       	ldi	r24, 0x7F	; 127
 d00:	86 0f       	add	r24, r22
 d02:	0c c0       	rjmp	.+24     	; 0xd1c <CLCD_voidSetPosition+0x32>
 d04:	82 30       	cpi	r24, 0x02	; 2
 d06:	49 f4       	brne	.+18     	; 0xd1a <CLCD_voidSetPosition+0x30>
 d08:	8f eb       	ldi	r24, 0xBF	; 191
 d0a:	86 0f       	add	r24, r22
 d0c:	07 c0       	rjmp	.+14     	; 0xd1c <CLCD_voidSetPosition+0x32>
 d0e:	80 e8       	ldi	r24, 0x80	; 128
 d10:	05 c0       	rjmp	.+10     	; 0xd1c <CLCD_voidSetPosition+0x32>
 d12:	80 e8       	ldi	r24, 0x80	; 128
 d14:	03 c0       	rjmp	.+6      	; 0xd1c <CLCD_voidSetPosition+0x32>
 d16:	80 e8       	ldi	r24, 0x80	; 128
 d18:	01 c0       	rjmp	.+2      	; 0xd1c <CLCD_voidSetPosition+0x32>
 d1a:	80 e0       	ldi	r24, 0x00	; 0
 d1c:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendCommand>
 d20:	8f ec       	ldi	r24, 0xCF	; 207
 d22:	97 e0       	ldi	r25, 0x07	; 7
 d24:	01 97       	sbiw	r24, 0x01	; 1
 d26:	f1 f7       	brne	.-4      	; 0xd24 <CLCD_voidSetPosition+0x3a>
 d28:	00 c0       	rjmp	.+0      	; 0xd2a <CLCD_voidSetPosition+0x40>
 d2a:	00 00       	nop
 d2c:	08 95       	ret

Disassembly of section .text.CLCD_voidClearScreen:

00000f6e <CLCD_voidClearScreen>:
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
	CLCD_voidSendCommand(lcd_Clear);
 f6e:	81 e0       	ldi	r24, 0x01	; 1
 f70:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 f74:	8f e1       	ldi	r24, 0x1F	; 31
 f76:	9e e4       	ldi	r25, 0x4E	; 78
 f78:	01 97       	sbiw	r24, 0x01	; 1
 f7a:	f1 f7       	brne	.-4      	; 0xf78 <CLCD_voidClearScreen+0xa>
 f7c:	00 c0       	rjmp	.+0      	; 0xf7e <CLCD_voidClearScreen+0x10>
 f7e:	00 00       	nop
 f80:	08 95       	ret

Disassembly of section .text.CLCD_voidInit:

0000091c <CLCD_voidInit>:

		CLCD_voidSendData( LOC_u8Iterator );

	}

}
 91c:	2f e7       	ldi	r18, 0x7F	; 127
 91e:	88 e3       	ldi	r24, 0x38	; 56
 920:	91 e0       	ldi	r25, 0x01	; 1
 922:	21 50       	subi	r18, 0x01	; 1
 924:	80 40       	sbci	r24, 0x00	; 0
 926:	90 40       	sbci	r25, 0x00	; 0
 928:	e1 f7       	brne	.-8      	; 0x922 <CLCD_voidInit+0x6>
 92a:	00 c0       	rjmp	.+0      	; 0x92c <CLCD_voidInit+0x10>
 92c:	00 00       	nop
 92e:	6f ef       	ldi	r22, 0xFF	; 255
 930:	83 e0       	ldi	r24, 0x03	; 3
 932:	0e 94 37 07 	call	0xe6e	; 0xe6e <DIO_voidSetPortDirection>
 936:	4f ef       	ldi	r20, 0xFF	; 255
 938:	65 e0       	ldi	r22, 0x05	; 5
 93a:	82 e0       	ldi	r24, 0x02	; 2
 93c:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
 940:	4f ef       	ldi	r20, 0xFF	; 255
 942:	66 e0       	ldi	r22, 0x06	; 6
 944:	82 e0       	ldi	r24, 0x02	; 2
 946:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
 94a:	4f ef       	ldi	r20, 0xFF	; 255
 94c:	67 e0       	ldi	r22, 0x07	; 7
 94e:	82 e0       	ldi	r24, 0x02	; 2
 950:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
 954:	82 e0       	ldi	r24, 0x02	; 2
 956:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendCommand>
 95a:	8f ec       	ldi	r24, 0xCF	; 207
 95c:	97 e0       	ldi	r25, 0x07	; 7
 95e:	01 97       	sbiw	r24, 0x01	; 1
 960:	f1 f7       	brne	.-4      	; 0x95e <CLCD_voidInit+0x42>
 962:	00 c0       	rjmp	.+0      	; 0x964 <CLCD_voidInit+0x48>
 964:	00 00       	nop
 966:	88 e3       	ldi	r24, 0x38	; 56
 968:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendCommand>
 96c:	8f ec       	ldi	r24, 0xCF	; 207
 96e:	97 e0       	ldi	r25, 0x07	; 7
 970:	01 97       	sbiw	r24, 0x01	; 1
 972:	f1 f7       	brne	.-4      	; 0x970 <CLCD_voidInit+0x54>
 974:	00 c0       	rjmp	.+0      	; 0x976 <CLCD_voidInit+0x5a>
 976:	00 00       	nop
 978:	8c e0       	ldi	r24, 0x0C	; 12
 97a:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendCommand>
 97e:	8f ec       	ldi	r24, 0xCF	; 207
 980:	97 e0       	ldi	r25, 0x07	; 7
 982:	01 97       	sbiw	r24, 0x01	; 1
 984:	f1 f7       	brne	.-4      	; 0x982 <CLCD_voidInit+0x66>
 986:	00 c0       	rjmp	.+0      	; 0x988 <CLCD_voidInit+0x6c>
 988:	00 00       	nop
 98a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <CLCD_voidClearScreen>
 98e:	86 e0       	ldi	r24, 0x06	; 6
 990:	0e 94 48 06 	call	0xc90	; 0xc90 <CLCD_voidSendCommand>
 994:	8f ec       	ldi	r24, 0xCF	; 207
 996:	97 e0       	ldi	r25, 0x07	; 7
 998:	01 97       	sbiw	r24, 0x01	; 1
 99a:	f1 f7       	brne	.-4      	; 0x998 <CLCD_voidInit+0x7c>
 99c:	00 c0       	rjmp	.+0      	; 0x99e <CLCD_voidInit+0x82>
 99e:	00 00       	nop
 9a0:	08 95       	ret

Disassembly of section .text.KYPD_voidInt:

00000bd4 <KYPD_voidInt>:



void KYPD_voidInt			(void)
{
	DIO_voidSetPinDirection(KYPD_ROW_PORT, KYPD_ROW_PIN0, DIO_PIN_INPUT);
 bd4:	40 e0       	ldi	r20, 0x00	; 0
 bd6:	60 e0       	ldi	r22, 0x00	; 0
 bd8:	80 e0       	ldi	r24, 0x00	; 0
 bda:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KYPD_ROW_PORT, KYPD_ROW_PIN1, DIO_PIN_INPUT);
 bde:	40 e0       	ldi	r20, 0x00	; 0
 be0:	61 e0       	ldi	r22, 0x01	; 1
 be2:	80 e0       	ldi	r24, 0x00	; 0
 be4:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KYPD_ROW_PORT, KYPD_ROW_PIN2, DIO_PIN_INPUT);
 be8:	40 e0       	ldi	r20, 0x00	; 0
 bea:	62 e0       	ldi	r22, 0x02	; 2
 bec:	80 e0       	ldi	r24, 0x00	; 0
 bee:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KYPD_ROW_PORT, KYPD_ROW_PIN3, DIO_PIN_INPUT);
 bf2:	40 e0       	ldi	r20, 0x00	; 0
 bf4:	63 e0       	ldi	r22, 0x03	; 3
 bf6:	80 e0       	ldi	r24, 0x00	; 0
 bf8:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
	
	DIO_voidSetPortValue	(KYPD_ROW_PORT, 0x0F);   //>>>>>>  must be Set Higher Nibble of The PORt
 bfc:	6f e0       	ldi	r22, 0x0F	; 15
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	0e 94 47 07 	call	0xe8e	; 0xe8e <DIO_voidSetPortValue>
	
	DIO_voidSetPinDirection(KYPD_COL_PORT, KYPD_COL_PIN0, DIO_PIN_OUTPUT);
 c04:	4f ef       	ldi	r20, 0xFF	; 255
 c06:	64 e0       	ldi	r22, 0x04	; 4
 c08:	81 e0       	ldi	r24, 0x01	; 1
 c0a:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KYPD_COL_PORT, KYPD_COL_PIN1, DIO_PIN_OUTPUT);
 c0e:	4f ef       	ldi	r20, 0xFF	; 255
 c10:	65 e0       	ldi	r22, 0x05	; 5
 c12:	81 e0       	ldi	r24, 0x01	; 1
 c14:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KYPD_COL_PORT, KYPD_COL_PIN2, DIO_PIN_OUTPUT);
 c18:	4f ef       	ldi	r20, 0xFF	; 255
 c1a:	66 e0       	ldi	r22, 0x06	; 6
 c1c:	81 e0       	ldi	r24, 0x01	; 1
 c1e:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KYPD_COL_PORT, KYPD_COL_PIN3, DIO_PIN_OUTPUT);
 c22:	4f ef       	ldi	r20, 0xFF	; 255
 c24:	67 e0       	ldi	r22, 0x07	; 7
 c26:	81 e0       	ldi	r24, 0x01	; 1
 c28:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
	
	DIO_voidSetPortValue (KYPD_COL_PORT, 0xFF);
 c2c:	6f ef       	ldi	r22, 0xFF	; 255
 c2e:	81 e0       	ldi	r24, 0x01	; 1
 c30:	0e 94 47 07 	call	0xe8e	; 0xe8e <DIO_voidSetPortValue>
 c34:	08 95       	ret

Disassembly of section .text.KYPD_u8GetPressedKey:

00000360 <KYPD_u8GetPressedKey>:




u8 KYPD_u8GetPressedKey	(void)
{
 360:	af 92       	push	r10
 362:	bf 92       	push	r11
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	69 97       	sbiw	r28, 0x19	; 25
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8ROW_Val = 0;
	u8 LOC_u8COL_Val = 0;
	
	u8 KYPD_u8ROWPINArr [KYPD_NUM_ROWS] = {KYPD_ROW_PIN0, KYPD_ROW_PIN1, KYPD_ROW_PIN2, KYPD_ROW_PIN3}; 
 384:	19 82       	std	Y+1, r1	; 0x01
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	8a 83       	std	Y+2, r24	; 0x02
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	8b 83       	std	Y+3, r24	; 0x03
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	8c 83       	std	Y+4, r24	; 0x04
	u8 KYPD_u8COLPINArr [KYPD_NUM_COLS] = {KYPD_COL_PIN0, KYPD_COL_PIN1, KYPD_COL_PIN2, KYPD_COL_PIN3}; 
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	8d 83       	std	Y+5, r24	; 0x05
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	8e 83       	std	Y+6, r24	; 0x06
 39a:	86 e0       	ldi	r24, 0x06	; 6
 39c:	8f 83       	std	Y+7, r24	; 0x07
 39e:	87 e0       	ldi	r24, 0x07	; 7
 3a0:	88 87       	std	Y+8, r24	; 0x08
	
	for(LOC_u8COL_Val = 0; LOC_u8COL_Val < KYPD_NUM_COLS; LOC_u8COL_Val++)
 3a2:	b1 2c       	mov	r11, r1
 3a4:	5b c0       	rjmp	.+182    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
	{
		
		DIO_voidSetPinValue		(KYPD_COL_PORT, KYPD_u8COLPINArr[LOC_u8COL_Val], DIO_PIN_LOW);
 3a6:	cb 2c       	mov	r12, r11
 3a8:	d1 2c       	mov	r13, r1
 3aa:	e5 e0       	ldi	r30, 0x05	; 5
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ec 0f       	add	r30, r28
 3b0:	fd 1f       	adc	r31, r29
 3b2:	ec 0d       	add	r30, r12
 3b4:	fd 1d       	adc	r31, r13
 3b6:	a0 80       	ld	r10, Z
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	6a 2d       	mov	r22, r10
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
		
		for(LOC_u8ROW_Val = 0; LOC_u8ROW_Val < KYPD_NUM_ROWS; LOC_u8ROW_Val++)
 3c2:	10 e0       	ldi	r17, 0x00	; 0
 3c4:	42 c0       	rjmp	.+132    	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{
			u8 u8Value = KYPD_BUTTON_RELEASED; 
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	89 8f       	std	Y+25, r24	; 0x19
			DIO_u8GetPinValue(KYPD_ROW_PORT, KYPD_u8ROWPINArr[LOC_u8ROW_Val], &u8Value);
 3ca:	e1 2e       	mov	r14, r17
 3cc:	f1 2c       	mov	r15, r1
 3ce:	e1 e0       	ldi	r30, 0x01	; 1
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	ec 0f       	add	r30, r28
 3d4:	fd 1f       	adc	r31, r29
 3d6:	ee 0d       	add	r30, r14
 3d8:	ff 1d       	adc	r31, r15
 3da:	00 81       	ld	r16, Z
 3dc:	ae 01       	movw	r20, r28
 3de:	47 5e       	subi	r20, 0xE7	; 231
 3e0:	5f 4f       	sbci	r21, 0xFF	; 255
 3e2:	60 2f       	mov	r22, r16
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_u8GetPinValue>
			
			if(u8Value == KYPD_BUTTON_PRESSED)
 3ea:	89 8d       	ldd	r24, Y+25	; 0x19
 3ec:	81 11       	cpse	r24, r1
 3ee:	2c c0       	rjmp	.+88     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3f0:	8f e5       	ldi	r24, 0x5F	; 95
 3f2:	9a ee       	ldi	r25, 0xEA	; 234
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <KYPD_u8GetPressedKey+0x94>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <KYPD_u8GetPressedKey+0x9a>
 3fa:	00 00       	nop
			{
				_delay_ms(30);
				if(u8Value == KYPD_BUTTON_PRESSED)
 3fc:	89 8d       	ldd	r24, Y+25	; 0x19
 3fe:	81 11       	cpse	r24, r1
 400:	23 c0       	rjmp	.+70     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 402:	07 c0       	rjmp	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
				{
					while(u8Value == KYPD_BUTTON_PRESSED)
					{
						DIO_u8GetPinValue(KYPD_ROW_PORT, KYPD_u8ROWPINArr[LOC_u8ROW_Val], &u8Value); 
 404:	ae 01       	movw	r20, r28
 406:	47 5e       	subi	r20, 0xE7	; 231
 408:	5f 4f       	sbci	r21, 0xFF	; 255
 40a:	60 2f       	mov	r22, r16
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <DIO_u8GetPinValue>
			if(u8Value == KYPD_BUTTON_PRESSED)
			{
				_delay_ms(30);
				if(u8Value == KYPD_BUTTON_PRESSED)
				{
					while(u8Value == KYPD_BUTTON_PRESSED)
 412:	89 8d       	ldd	r24, Y+25	; 0x19
 414:	88 23       	and	r24, r24
 416:	b1 f3       	breq	.-20     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
					{
						DIO_u8GetPinValue(KYPD_ROW_PORT, KYPD_u8ROWPINArr[LOC_u8ROW_Val], &u8Value); 
					}
					
					u8 KYPD_u8Value[KYPD_NUM_ROWS][KYPD_NUM_COLS] = KYPD_VALUES;
 418:	80 e1       	ldi	r24, 0x10	; 16
 41a:	e0 e6       	ldi	r30, 0x60	; 96
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	de 01       	movw	r26, r28
 420:	19 96       	adiw	r26, 0x09	; 9
 422:	01 90       	ld	r0, Z+
 424:	0d 92       	st	X+, r0
 426:	8a 95       	dec	r24
 428:	e1 f7       	brne	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
					
					return KYPD_u8Value[LOC_u8ROW_Val][LOC_u8COL_Val];
 42a:	ee 0c       	add	r14, r14
 42c:	ff 1c       	adc	r15, r15
 42e:	ee 0c       	add	r14, r14
 430:	ff 1c       	adc	r15, r15
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	8c 0f       	add	r24, r28
 438:	9d 1f       	adc	r25, r29
 43a:	e8 0e       	add	r14, r24
 43c:	f9 1e       	adc	r15, r25
 43e:	f7 01       	movw	r30, r14
 440:	ec 0d       	add	r30, r12
 442:	fd 1d       	adc	r31, r13
 444:	80 85       	ldd	r24, Z+8	; 0x08
 446:	0f c0       	rjmp	.+30     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
	for(LOC_u8COL_Val = 0; LOC_u8COL_Val < KYPD_NUM_COLS; LOC_u8COL_Val++)
	{
		
		DIO_voidSetPinValue		(KYPD_COL_PORT, KYPD_u8COLPINArr[LOC_u8COL_Val], DIO_PIN_LOW);
		
		for(LOC_u8ROW_Val = 0; LOC_u8ROW_Val < KYPD_NUM_ROWS; LOC_u8ROW_Val++)
 448:	1f 5f       	subi	r17, 0xFF	; 255
 44a:	14 30       	cpi	r17, 0x04	; 4
 44c:	08 f4       	brcc	.+2      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44e:	bb cf       	rjmp	.-138    	; 0x3c6 <KYPD_u8GetPressedKey+0x66>
					return KYPD_u8Value[LOC_u8ROW_Val][LOC_u8COL_Val];
				}
			}
			
		}
		DIO_voidSetPinValue		(KYPD_COL_PORT, KYPD_u8COLPINArr[LOC_u8COL_Val], DIO_PIN_HIGH);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	6a 2d       	mov	r22, r10
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
	u8 LOC_u8COL_Val = 0;
	
	u8 KYPD_u8ROWPINArr [KYPD_NUM_ROWS] = {KYPD_ROW_PIN0, KYPD_ROW_PIN1, KYPD_ROW_PIN2, KYPD_ROW_PIN3}; 
	u8 KYPD_u8COLPINArr [KYPD_NUM_COLS] = {KYPD_COL_PIN0, KYPD_COL_PIN1, KYPD_COL_PIN2, KYPD_COL_PIN3}; 
	
	for(LOC_u8COL_Val = 0; LOC_u8COL_Val < KYPD_NUM_COLS; LOC_u8COL_Val++)
 45a:	b3 94       	inc	r11
 45c:	93 e0       	ldi	r25, 0x03	; 3
 45e:	9b 15       	cp	r25, r11
 460:	08 f0       	brcs	.+2      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 462:	a1 cf       	rjmp	.-190    	; 0x3a6 <KYPD_u8GetPressedKey+0x46>
			}
			
		}
		DIO_voidSetPinValue		(KYPD_COL_PORT, KYPD_u8COLPINArr[LOC_u8COL_Val], DIO_PIN_HIGH);
	}
	return KYPD_BUTTON_RELEASED;
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	69 96       	adiw	r28, 0x19	; 25
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	bf 90       	pop	r11
 484:	af 90       	pop	r10
 486:	08 95       	ret

Disassembly of section .text.LED_voidInit:

00000f94 <LED_voidInit>:




void LED_voidInit (LED_Type LED_Configuration)
{
 f94:	86 2f       	mov	r24, r22
 f96:	67 2f       	mov	r22, r23
	DIO_voidSetPinDirection(LED_Configuration.Port, LED_Configuration.Pin, DIO_PIN_OUTPUT);
 f98:	4f ef       	ldi	r20, 0xFF	; 255
 f9a:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
 f9e:	08 95       	ret

Disassembly of section .text.LED_voidOn:

00000eae <LED_voidOn>:
}


void LED_voidOn (LED_Type LED_Configuration)
{
 eae:	96 2f       	mov	r25, r22
	if(LED_Configuration.Active_State == ACTIVE_HIGH)
 eb0:	81 30       	cpi	r24, 0x01	; 1
 eb2:	31 f4       	brne	.+12     	; 0xec0 <LED_voidOn+0x12>
	{
		DIO_voidSetPinValue(LED_Configuration.Port, LED_Configuration.Pin, DIO_PIN_HIGH);
 eb4:	41 e0       	ldi	r20, 0x01	; 1
 eb6:	67 2f       	mov	r22, r23
 eb8:	89 2f       	mov	r24, r25
 eba:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 ebe:	08 95       	ret
	}
	else
	{
		DIO_voidSetPinValue(LED_Configuration.Port, LED_Configuration.Pin, DIO_PIN_LOW);
 ec0:	40 e0       	ldi	r20, 0x00	; 0
 ec2:	67 2f       	mov	r22, r23
 ec4:	89 2f       	mov	r24, r25
 ec6:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 eca:	08 95       	ret

Disassembly of section .text.LED_voidOff:

00000ecc <LED_voidOff>:
	}
}


void LED_voidOff (LED_Type LED_Configuration)
{
 ecc:	96 2f       	mov	r25, r22
	if(LED_Configuration.Active_State == ACTIVE_HIGH)
 ece:	81 30       	cpi	r24, 0x01	; 1
 ed0:	31 f4       	brne	.+12     	; 0xede <LED_voidOff+0x12>
	{
		DIO_voidSetPinValue(LED_Configuration.Port, LED_Configuration.Pin, DIO_PIN_LOW);
 ed2:	40 e0       	ldi	r20, 0x00	; 0
 ed4:	67 2f       	mov	r22, r23
 ed6:	89 2f       	mov	r24, r25
 ed8:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 edc:	08 95       	ret
	}
	else
	{
		DIO_voidSetPinValue(LED_Configuration.Port, LED_Configuration.Pin, DIO_PIN_HIGH);
 ede:	41 e0       	ldi	r20, 0x01	; 1
 ee0:	67 2f       	mov	r22, r23
 ee2:	89 2f       	mov	r24, r25
 ee4:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 ee8:	08 95       	ret

Disassembly of section .text.LM35_u8GetTemp:

00000726 <LM35_u8GetTemp>:
            => struct has the LM35 Channel, ADC VoltageReference , ADCResolution
			=> Pointer to TEMP Variable which will return in it 
* return : Error State
*/
void LM35_u8GetTemp (LM35_CONFIG * lm35 , u8 * Copy_u8TempValue)
{
 726:	cf 92       	push	r12
 728:	df 92       	push	r13
 72a:	ef 92       	push	r14
 72c:	ff 92       	push	r15
 72e:	0f 93       	push	r16
 730:	1f 93       	push	r17
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	00 d0       	rcall	.+0      	; 0x738 <LM35_u8GetTemp+0x12>
 738:	cd b7       	in	r28, 0x3d	; 61
 73a:	de b7       	in	r29, 0x3e	; 62
 73c:	7c 01       	movw	r14, r24
 73e:	8b 01       	movw	r16, r22
	//u8 Local_u8ErrorState = OK ;

	u16 Local_u16ADCResult = 0;
 740:	1a 82       	std	Y+2, r1	; 0x02
 742:	19 82       	std	Y+1, r1	; 0x01
	u16 Local_u16AnalogValue = 0;
	
	u16 Local_u8ADCReference = ( lm35->Copy_u8ADCVoltageReference ) * 1000;  // To Convert from ( V --> mV )
 744:	fc 01       	movw	r30, r24
 746:	21 81       	ldd	r18, Z+1	; 0x01
 748:	88 ee       	ldi	r24, 0xE8	; 232
 74a:	93 e0       	ldi	r25, 0x03	; 3
 74c:	28 9f       	mul	r18, r24
 74e:	60 01       	movw	r12, r0
 750:	29 9f       	mul	r18, r25
 752:	d0 0c       	add	r13, r0
 754:	11 24       	eor	r1, r1
	
	
	/* ADC Digital Reading  */
	ADC_u8GetResultSync( lm35->Copy_u8LM35Channel , &Local_u16ADCResult );
 756:	be 01       	movw	r22, r28
 758:	6f 5f       	subi	r22, 0xFF	; 255
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	80 81       	ld	r24, Z
 75e:	0e 94 14 05 	call	0xa28	; 0xa28 <ADC_u8GetResultSync>

	/* Check for ADC Resolution  */
	if ( lm35->Copy_u8ADCResolution == ADC_RESOLUTION_10_BIT )
 762:	f7 01       	movw	r30, r14
 764:	82 81       	ldd	r24, Z+2	; 0x02
 766:	81 11       	cpse	r24, r1
 768:	12 c0       	rjmp	.+36     	; 0x78e <LM35_u8GetTemp+0x68>
	{
		Local_u16AnalogValue = (u16) ( ((u32)Local_u16ADCResult * (u32)Local_u8ADCReference ) / 1024UL);
 76a:	29 81       	ldd	r18, Y+1	; 0x01
 76c:	3a 81       	ldd	r19, Y+2	; 0x02
 76e:	d6 01       	movw	r26, r12
 770:	0e 94 75 07 	call	0xeea	; 0xeea <__umulhisi3>
 774:	dc 01       	movw	r26, r24
 776:	cb 01       	movw	r24, r22
 778:	07 2e       	mov	r0, r23
 77a:	7a e0       	ldi	r23, 0x0A	; 10
 77c:	b6 95       	lsr	r27
 77e:	a7 95       	ror	r26
 780:	97 95       	ror	r25
 782:	87 95       	ror	r24
 784:	7a 95       	dec	r23
 786:	d1 f7       	brne	.-12     	; 0x77c <LM35_u8GetTemp+0x56>
 788:	70 2d       	mov	r23, r0
 78a:	9c 01       	movw	r18, r24
 78c:	0f c0       	rjmp	.+30     	; 0x7ac <LM35_u8GetTemp+0x86>

	}
	else if ( lm35->Copy_u8ADCResolution == ADC_RESOLUTION_8_BIT )
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	59 f4       	brne	.+22     	; 0x7a8 <LM35_u8GetTemp+0x82>
	{
		Local_u16AnalogValue = (u16) ( ((u32)Local_u16ADCResult * (u32)Local_u8ADCReference ) / 256UL);
 792:	29 81       	ldd	r18, Y+1	; 0x01
 794:	3a 81       	ldd	r19, Y+2	; 0x02
 796:	d6 01       	movw	r26, r12
 798:	0e 94 75 07 	call	0xeea	; 0xeea <__umulhisi3>
 79c:	bb 27       	eor	r27, r27
 79e:	a9 2f       	mov	r26, r25
 7a0:	98 2f       	mov	r25, r24
 7a2:	87 2f       	mov	r24, r23
 7a4:	9c 01       	movw	r18, r24
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <LM35_u8GetTemp+0x86>
void LM35_u8GetTemp (LM35_CONFIG * lm35 , u8 * Copy_u8TempValue)
{
	//u8 Local_u8ErrorState = OK ;

	u16 Local_u16ADCResult = 0;
	u16 Local_u16AnalogValue = 0;
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	30 e0       	ldi	r19, 0x00	; 0
		Local_u16AnalogValue = (u16) ( ((u32)Local_u16ADCResult * (u32)Local_u8ADCReference ) / 256UL);
	}


	/* Convert ( mv --> Temp ) */
	* Copy_u8TempValue = Local_u16AnalogValue / 10 ;
 7ac:	ad ec       	ldi	r26, 0xCD	; 205
 7ae:	bc ec       	ldi	r27, 0xCC	; 204
 7b0:	0e 94 75 07 	call	0xeea	; 0xeea <__umulhisi3>
 7b4:	96 95       	lsr	r25
 7b6:	87 95       	ror	r24
 7b8:	96 95       	lsr	r25
 7ba:	87 95       	ror	r24
 7bc:	96 95       	lsr	r25
 7be:	87 95       	ror	r24
 7c0:	f8 01       	movw	r30, r16
 7c2:	80 83       	st	Z, r24

	//return Local_u8ErrorState ;
 7c4:	0f 90       	pop	r0
 7c6:	0f 90       	pop	r0
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	1f 91       	pop	r17
 7ce:	0f 91       	pop	r16
 7d0:	ff 90       	pop	r15
 7d2:	ef 90       	pop	r14
 7d4:	df 90       	pop	r13
 7d6:	cf 90       	pop	r12
 7d8:	08 95       	ret

Disassembly of section .text.Init_peripherals:

00000d6e <Init_peripherals>:



void Init_peripherals(void)
{
		CLCD_voidInit();
 d6e:	0e 94 8e 04 	call	0x91c	; 0x91c <CLCD_voidInit>
		KYPD_voidInt();
 d72:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <KYPD_voidInt>
		
		ADC_voidInit();
 d76:	0e 94 21 07 	call	0xe42	; 0xe42 <ADC_voidInit>
		ADC_voidEnable();
 d7a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ADC_voidEnable>
		
		PMW_voidInit();
 d7e:	0e 94 97 06 	call	0xd2e	; 0xd2e <PMW_voidInit>
		
		DIO_voidSetPinDirection(DIO_PORTC, DIO_PIN0, DIO_PIN_OUTPUT);
 d82:	4f ef       	ldi	r20, 0xFF	; 255
 d84:	60 e0       	ldi	r22, 0x00	; 0
 d86:	82 e0       	ldi	r24, 0x02	; 2
 d88:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(DIO_PORTC, DIO_PIN0, DIO_PIN_HIGH);
 d8c:	41 e0       	ldi	r20, 0x01	; 1
 d8e:	60 e0       	ldi	r22, 0x00	; 0
 d90:	82 e0       	ldi	r24, 0x02	; 2
 d92:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
		DIO_voidSetPinDirection(DIO_PORTC, DIO_PIN1, DIO_PIN_OUTPUT);
 d96:	4f ef       	ldi	r20, 0xFF	; 255
 d98:	61 e0       	ldi	r22, 0x01	; 1
 d9a:	82 e0       	ldi	r24, 0x02	; 2
 d9c:	0e 94 44 02 	call	0x488	; 0x488 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(DIO_PORTC, DIO_PIN1, DIO_PIN_LOW);
 da0:	40 e0       	ldi	r20, 0x00	; 0
 da2:	61 e0       	ldi	r22, 0x01	; 1
 da4:	82 e0       	ldi	r24, 0x02	; 2
 da6:	0e 94 b4 02 	call	0x568	; 0x568 <DIO_voidSetPinValue>
 daa:	08 95       	ret

Disassembly of section .text.System_Locked:

00000a94 <System_Locked>:



void System_Locked(void)
{
	try++;
 a94:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <try>
 a98:	8f 5f       	subi	r24, 0xFF	; 255
 a9a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <try>
	if(try > 3)
 a9e:	84 30       	cpi	r24, 0x04	; 4
 aa0:	f0 f0       	brcs	.+60     	; 0xade <System_Locked+0x4a>
	{
		try = 1;
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <try>
		CLCD_voidClearScreen();
 aa8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <CLCD_voidClearScreen>
		CLCD_voidSendString("System is locked");
 aac:	68 ec       	ldi	r22, 0xC8	; 200
 aae:	70 e0       	ldi	r23, 0x00	; 0
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	0e 94 d6 06 	call	0xdac	; 0xdac <CLCD_voidSendString>
		CLCD_voidSetPosition(2, 1);
 ab6:	61 e0       	ldi	r22, 0x01	; 1
 ab8:	82 e0       	ldi	r24, 0x02	; 2
 aba:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSetPosition>
		CLCD_voidSendString("for 2 minutes");
 abe:	69 ed       	ldi	r22, 0xD9	; 217
 ac0:	70 e0       	ldi	r23, 0x00	; 0
 ac2:	80 e0       	ldi	r24, 0x00	; 0
 ac4:	0e 94 d6 06 	call	0xdac	; 0xdac <CLCD_voidSendString>
 ac8:	2f ef       	ldi	r18, 0xFF	; 255
 aca:	3c e2       	ldi	r19, 0x2C	; 44
 acc:	81 e3       	ldi	r24, 0x31	; 49
 ace:	91 e0       	ldi	r25, 0x01	; 1
 ad0:	21 50       	subi	r18, 0x01	; 1
 ad2:	30 40       	sbci	r19, 0x00	; 0
 ad4:	80 40       	sbci	r24, 0x00	; 0
 ad6:	90 40       	sbci	r25, 0x00	; 0
 ad8:	d9 f7       	brne	.-10     	; 0xad0 <System_Locked+0x3c>
 ada:	00 c0       	rjmp	.+0      	; 0xadc <System_Locked+0x48>
 adc:	00 00       	nop
		_delay_ms(120000);
	}
	CLCD_voidClearScreen();
 ade:	0e 94 b7 07 	call	0xf6e	; 0xf6e <CLCD_voidClearScreen>
	CLCD_voidSendString("wrong password,");
 ae2:	67 ee       	ldi	r22, 0xE7	; 231
 ae4:	70 e0       	ldi	r23, 0x00	; 0
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	0e 94 d6 06 	call	0xdac	; 0xdac <CLCD_voidSendString>
	CLCD_voidSetPosition(2, 1);
 aec:	61 e0       	ldi	r22, 0x01	; 1
 aee:	82 e0       	ldi	r24, 0x02	; 2
 af0:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSetPosition>
	CLCD_voidSendString("please Try again");
 af4:	67 ef       	ldi	r22, 0xF7	; 247
 af6:	70 e0       	ldi	r23, 0x00	; 0
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	0e 94 d6 06 	call	0xdac	; 0xdac <CLCD_voidSendString>
 afe:	08 95       	ret

Disassembly of section .text.LED_OFF_ON:

0000087c <LED_OFF_ON>:
}



void LED_OFF_ON(void)
{
 87c:	cf 93       	push	r28
	CLCD_voidClearScreen();
 87e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <CLCD_voidClearScreen>
	CLCD_voidSendString("Welcom Mesho");
 882:	68 e0       	ldi	r22, 0x08	; 8
 884:	71 e0       	ldi	r23, 0x01	; 1
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	0e 94 d6 06 	call	0xdac	; 0xdac <CLCD_voidSendString>
 88c:	2f eb       	ldi	r18, 0xBF	; 191
 88e:	84 ed       	ldi	r24, 0xD4	; 212
 890:	91 e0       	ldi	r25, 0x01	; 1
 892:	21 50       	subi	r18, 0x01	; 1
 894:	80 40       	sbci	r24, 0x00	; 0
 896:	90 40       	sbci	r25, 0x00	; 0
 898:	e1 f7       	brne	.-8      	; 0x892 <LED_OFF_ON+0x16>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <LED_OFF_ON+0x20>
 89c:	00 00       	nop
	_delay_ms(600);
	CLCD_voidClearScreen();
 89e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <CLCD_voidClearScreen>
	
	CLCD_voidSendString("1- Leds ON");
 8a2:	65 e1       	ldi	r22, 0x15	; 21
 8a4:	71 e0       	ldi	r23, 0x01	; 1
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	0e 94 d6 06 	call	0xdac	; 0xdac <CLCD_voidSendString>
	CLCD_voidSetPosition(2, 1);
 8ac:	61 e0       	ldi	r22, 0x01	; 1
 8ae:	82 e0       	ldi	r24, 0x02	; 2
 8b0:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSetPosition>
	CLCD_voidSendString("2- Leds OFF");
 8b4:	60 e2       	ldi	r22, 0x20	; 32
 8b6:	71 e0       	ldi	r23, 0x01	; 1
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	0e 94 d6 06 	call	0xdac	; 0xdac <CLCD_voidSendString>
	
	while(1)
	{
		u8 val = KYPD_BUTTON_RELEASED;
 8be:	c1 e0       	ldi	r28, 0x01	; 1
		while (val == KYPD_BUTTON_RELEASED || (val != '1' && val != '2' && val != 'c'))
 8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <LED_OFF_ON+0x4c>
		{
			val = KYPD_u8GetPressedKey();
 8c2:	0e 94 b0 01 	call	0x360	; 0x360 <KYPD_u8GetPressedKey>
 8c6:	c8 2f       	mov	r28, r24
	CLCD_voidSendString("2- Leds OFF");
	
	while(1)
	{
		u8 val = KYPD_BUTTON_RELEASED;
		while (val == KYPD_BUTTON_RELEASED || (val != '1' && val != '2' && val != 'c'))
 8c8:	c1 30       	cpi	r28, 0x01	; 1
 8ca:	d9 f3       	breq	.-10     	; 0x8c2 <LED_OFF_ON+0x46>
 8cc:	8f ec       	ldi	r24, 0xCF	; 207
 8ce:	8c 0f       	add	r24, r28
 8d0:	82 30       	cpi	r24, 0x02	; 2
 8d2:	10 f0       	brcs	.+4      	; 0x8d8 <LED_OFF_ON+0x5c>
 8d4:	c3 36       	cpi	r28, 0x63	; 99
 8d6:	a9 f7       	brne	.-22     	; 0x8c2 <LED_OFF_ON+0x46>
		{
			val = KYPD_u8GetPressedKey();
		}
		if(val == 'c')
 8d8:	c3 36       	cpi	r28, 0x63	; 99
 8da:	f1 f0       	breq	.+60     	; 0x918 <LED_OFF_ON+0x9c>
		break;
		LED_voidInit(LED1);
 8dc:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <LED1>
 8e0:	70 91 8a 00 	lds	r23, 0x008A	; 0x80008a <LED1+0x1>
 8e4:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <LED1+0x2>
 8e8:	0e 94 ca 07 	call	0xf94	; 0xf94 <LED_voidInit>
		if(val == '1')
 8ec:	c1 33       	cpi	r28, 0x31	; 49
 8ee:	49 f4       	brne	.+18     	; 0x902 <LED_OFF_ON+0x86>
		LED_voidOn(LED1);
 8f0:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <LED1>
 8f4:	70 91 8a 00 	lds	r23, 0x008A	; 0x80008a <LED1+0x1>
 8f8:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <LED1+0x2>
 8fc:	0e 94 57 07 	call	0xeae	; 0xeae <LED_voidOn>
 900:	de cf       	rjmp	.-68     	; 0x8be <LED_OFF_ON+0x42>
		else if(val == '2')
 902:	c2 33       	cpi	r28, 0x32	; 50
 904:	e1 f6       	brne	.-72     	; 0x8be <LED_OFF_ON+0x42>
		LED_voidOff(LED1);
 906:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <LED1>
 90a:	70 91 8a 00 	lds	r23, 0x008A	; 0x80008a <LED1+0x1>
 90e:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <LED1+0x2>
 912:	0e 94 66 07 	call	0xecc	; 0xecc <LED_voidOff>
 916:	d3 cf       	rjmp	.-90     	; 0x8be <LED_OFF_ON+0x42>
	}
}
 918:	cf 91       	pop	r28
 91a:	08 95       	ret

Disassembly of section .text.Check_Password:

000009a2 <Check_Password>:



u8 Check_Password(void)
{
 9a2:	cf 93       	push	r28
 9a4:	df 93       	push	r29
	if(try == 1)
 9a6:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <try>
 9aa:	81 30       	cpi	r24, 0x01	; 1
 9ac:	71 f4       	brne	.+28     	; 0x9ca <Check_Password+0x28>
	{
		CLCD_voidSendString("Please Enter");
 9ae:	6c e2       	ldi	r22, 0x2C	; 44
 9b0:	71 e0       	ldi	r23, 0x01	; 1
 9b2:	80 e0       	ldi	r24, 0x00	; 0
 9b4:	0e 94 d6 06 	call	0xdac	; 0xdac <CLCD_voidSendString>
		CLCD_voidSetPosition(2, 1);
 9b8:	61 e0       	ldi	r22, 0x01	; 1
 9ba:	82 e0       	ldi	r24, 0x02	; 2
 9bc:	0e 94 75 06 	call	0xcea	; 0xcea <CLCD_voidSetPosition>
		CLCD_voidSendString("Password");
 9c0:	69 e3       	ldi	r22, 0x39	; 57
 9c2:	71 e0       	ldi	r23, 0x01	; 1
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	0e 94 d6 06 	call	0xdac	; 0xdac <CLCD_voidSendString>
 9ca:	d0 e0       	ldi	r29, 0x00	; 0
 9cc:	14 c0       	rjmp	.+40     	; 0x9f6 <Check_Password+0x54>
	while(cont < 11)
	{
		u8 val = KYPD_BUTTON_RELEASED;
		while(val == KYPD_BUTTON_RELEASED)
		{
			val = KYPD_u8GetPressedKey();
 9ce:	0e 94 b0 01 	call	0x360	; 0x360 <KYPD_u8GetPressedKey>
 9d2:	c8 2f       	mov	r28, r24
 9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <Check_Password+0x36>
 9d6:	c1 e0       	ldi	r28, 0x01	; 1
	}
	u8 cont = 0;
	while(cont < 11)
	{
		u8 val = KYPD_BUTTON_RELEASED;
		while(val == KYPD_BUTTON_RELEASED)
 9d8:	c1 30       	cpi	r28, 0x01	; 1
 9da:	c9 f3       	breq	.-14     	; 0x9ce <Check_Password+0x2c>
		{
			val = KYPD_u8GetPressedKey();
		}
		if(cont == 0)
 9dc:	d1 11       	cpse	r29, r1
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <Check_Password+0x42>
		CLCD_voidClearScreen();
 9e0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <CLCD_voidClearScreen>
		
		CLCD_voidSendData('*');
 9e4:	8a e2       	ldi	r24, 0x2A	; 42
 9e6:	0e 94 1b 06 	call	0xc36	; 0xc36 <CLCD_voidSendData>
		pass_copy[cont] = val;
 9ea:	ed 2f       	mov	r30, r29
 9ec:	f0 e0       	ldi	r31, 0x00	; 0
 9ee:	e0 59       	subi	r30, 0x90	; 144
 9f0:	ff 4f       	sbci	r31, 0xFF	; 255
 9f2:	c0 83       	st	Z, r28
		cont++;
 9f4:	df 5f       	subi	r29, 0xFF	; 255
		CLCD_voidSendString("Please Enter");
		CLCD_voidSetPosition(2, 1);
		CLCD_voidSendString("Password");
	}
	u8 cont = 0;
	while(cont < 11)
 9f6:	db 30       	cpi	r29, 0x0B	; 11
 9f8:	70 f3       	brcs	.-36     	; 0x9d6 <Check_Password+0x34>
 9fa:	20 e0       	ldi	r18, 0x00	; 0
 9fc:	0d c0       	rjmp	.+26     	; 0xa18 <Check_Password+0x76>
		cont++;
	}
	
	for(u8 indx = 0; indx < 11; indx++)
	{
		if(pass[indx] != pass_copy[indx])
 9fe:	82 2f       	mov	r24, r18
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	fc 01       	movw	r30, r24
 a04:	e5 58       	subi	r30, 0x85	; 133
 a06:	ff 4f       	sbci	r31, 0xFF	; 255
 a08:	30 81       	ld	r19, Z
 a0a:	fc 01       	movw	r30, r24
 a0c:	e0 59       	subi	r30, 0x90	; 144
 a0e:	ff 4f       	sbci	r31, 0xFF	; 255
 a10:	80 81       	ld	r24, Z
 a12:	38 13       	cpse	r19, r24
 a14:	05 c0       	rjmp	.+10     	; 0xa20 <Check_Password+0x7e>
		CLCD_voidSendData('*');
		pass_copy[cont] = val;
		cont++;
	}
	
	for(u8 indx = 0; indx < 11; indx++)
 a16:	2f 5f       	subi	r18, 0xFF	; 255
 a18:	2b 30       	cpi	r18, 0x0B	; 11
 a1a:	88 f3       	brcs	.-30     	; 0x9fe <Check_Password+0x5c>
		if(pass[indx] != pass_copy[indx])
		{
			return 0;
		}
	}
	return 1;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	01 c0       	rjmp	.+2      	; 0xa22 <Check_Password+0x80>
	
	for(u8 indx = 0; indx < 11; indx++)
	{
		if(pass[indx] != pass_copy[indx])
		{
			return 0;
 a20:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 1;
}
 a22:	df 91       	pop	r29
 a24:	cf 91       	pop	r28
 a26:	08 95       	ret

Disassembly of section .text.Conrol_Motor:

00000b00 <Conrol_Motor>:



void Conrol_Motor(void)
{
 b00:	cf 93       	push	r28
 b02:	df 93       	push	r29
	LM35_u8GetTemp(&lm35, &Temp);
 b04:	62 e9       	ldi	r22, 0x92	; 146
 b06:	70 e0       	ldi	r23, 0x00	; 0
 b08:	86 e8       	ldi	r24, 0x86	; 134
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 93 03 	call	0x726	; 0x726 <LM35_u8GetTemp>
	
	
	CLCD_voidClearScreen();
 b10:	0e 94 b7 07 	call	0xf6e	; 0xf6e <CLCD_voidClearScreen>
	//CLCD_voidSendString("Temp: ");
	CLCD_voidSendNumber(Temp);
 b14:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <Temp>
 b18:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <Temp+0x1>
 b1c:	28 2f       	mov	r18, r24
 b1e:	39 2f       	mov	r19, r25
 b20:	40 e0       	ldi	r20, 0x00	; 0
 b22:	50 e0       	ldi	r21, 0x00	; 0
 b24:	60 e0       	ldi	r22, 0x00	; 0
 b26:	70 e0       	ldi	r23, 0x00	; 0
 b28:	80 e0       	ldi	r24, 0x00	; 0
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	0e 94 a1 00 	call	0x142	; 0x142 <CLCD_voidSendNumber>
	if(Temp<=25)
 b30:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <Temp>
 b34:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <Temp+0x1>
 b38:	8a 31       	cpi	r24, 0x1A	; 26
 b3a:	91 05       	cpc	r25, r1
 b3c:	20 f4       	brcc	.+8      	; 0xb46 <Conrol_Motor+0x46>
	{
		PMW_voidSetDuty(0);
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	0e 94 d6 07 	call	0xfac	; 0xfac <PMW_voidSetDuty>
 b44:	0a c0       	rjmp	.+20     	; 0xb5a <Conrol_Motor+0x5a>
	}
	else if (Temp>25 && Temp<30)
 b46:	4a 97       	sbiw	r24, 0x1a	; 26
 b48:	04 97       	sbiw	r24, 0x04	; 4
 b4a:	20 f4       	brcc	.+8      	; 0xb54 <Conrol_Motor+0x54>
	{
		PMW_voidSetDuty(127);
 b4c:	8f e7       	ldi	r24, 0x7F	; 127
 b4e:	0e 94 d6 07 	call	0xfac	; 0xfac <PMW_voidSetDuty>
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <Conrol_Motor+0x5a>
	}
	else
	{
		PMW_voidSetDuty(255);
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	0e 94 d6 07 	call	0xfac	; 0xfac <PMW_voidSetDuty>
 b5a:	8f e4       	ldi	r24, 0x4F	; 79
 b5c:	93 ec       	ldi	r25, 0xC3	; 195
 b5e:	01 97       	sbiw	r24, 0x01	; 1
 b60:	f1 f7       	brne	.-4      	; 0xb5e <Conrol_Motor+0x5e>
 b62:	00 c0       	rjmp	.+0      	; 0xb64 <Conrol_Motor+0x64>
 b64:	00 00       	nop
	}
	_delay_ms(200);
}
 b66:	df 91       	pop	r29
 b68:	cf 91       	pop	r28
 b6a:	08 95       	ret

Disassembly of section .text.main:

00000f08 <main>:


int main(void)
{
	
	Init_peripherals();
 f08:	0e 94 b7 06 	call	0xd6e	; 0xd6e <Init_peripherals>
	
    while(1)
    {
		if( Check_Password() )
 f0c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <Check_Password>
 f10:	81 11       	cpse	r24, r1
 f12:	03 c0       	rjmp	.+6      	; 0xf1a <main+0x12>
			break;
		System_Locked();
 f14:	0e 94 4a 05 	call	0xa94	; 0xa94 <System_Locked>
    }
 f18:	f9 cf       	rjmp	.-14     	; 0xf0c <main+0x4>
	
	
	LED_OFF_ON();
 f1a:	0e 94 3e 04 	call	0x87c	; 0x87c <LED_OFF_ON>
	
	while(1)
	{
		Conrol_Motor();
 f1e:	0e 94 80 05 	call	0xb00	; 0xb00 <Conrol_Motor>
 f22:	fd cf       	rjmp	.-6      	; 0xf1e <main+0x16>

Disassembly of section .text.libgcc.mul:

00000eea <__umulhisi3>:
 eea:	a2 9f       	mul	r26, r18
 eec:	b0 01       	movw	r22, r0
 eee:	b3 9f       	mul	r27, r19
 ef0:	c0 01       	movw	r24, r0
 ef2:	a3 9f       	mul	r26, r19
 ef4:	70 0d       	add	r23, r0
 ef6:	81 1d       	adc	r24, r1
 ef8:	11 24       	eor	r1, r1
 efa:	91 1d       	adc	r25, r1
 efc:	b2 9f       	mul	r27, r18
 efe:	70 0d       	add	r23, r0
 f00:	81 1d       	adc	r24, r1
 f02:	11 24       	eor	r1, r1
 f04:	91 1d       	adc	r25, r1
 f06:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000f24 <__umoddi3>:
 f24:	68 94       	set
 f26:	01 c0       	rjmp	.+2      	; 0xf2a <__udivdi3_umoddi3>

00000f28 <__udivdi3>:
 f28:	e8 94       	clt

00000f2a <__udivdi3_umoddi3>:
 f2a:	8f 92       	push	r8
 f2c:	9f 92       	push	r9
 f2e:	cf 93       	push	r28
 f30:	df 93       	push	r29
 f32:	0e 94 ed 03 	call	0x7da	; 0x7da <__udivmod64>
 f36:	df 91       	pop	r29
 f38:	cf 91       	pop	r28
 f3a:	9f 90       	pop	r9
 f3c:	8f 90       	pop	r8
 f3e:	08 95       	ret

Disassembly of section .text.libgcc.div:

000007da <__udivmod64>:
 7da:	88 24       	eor	r8, r8
 7dc:	99 24       	eor	r9, r9
 7de:	f4 01       	movw	r30, r8
 7e0:	e4 01       	movw	r28, r8
 7e2:	b0 e4       	ldi	r27, 0x40	; 64
 7e4:	9f 93       	push	r25
 7e6:	aa 27       	eor	r26, r26
 7e8:	9a 15       	cp	r25, r10
 7ea:	8b 04       	cpc	r8, r11
 7ec:	9c 04       	cpc	r9, r12
 7ee:	ed 05       	cpc	r30, r13
 7f0:	fe 05       	cpc	r31, r14
 7f2:	cf 05       	cpc	r28, r15
 7f4:	d0 07       	cpc	r29, r16
 7f6:	a1 07       	cpc	r26, r17
 7f8:	98 f4       	brcc	.+38     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7fa:	ad 2f       	mov	r26, r29
 7fc:	dc 2f       	mov	r29, r28
 7fe:	cf 2f       	mov	r28, r31
 800:	fe 2f       	mov	r31, r30
 802:	e9 2d       	mov	r30, r9
 804:	98 2c       	mov	r9, r8
 806:	89 2e       	mov	r8, r25
 808:	98 2f       	mov	r25, r24
 80a:	87 2f       	mov	r24, r23
 80c:	76 2f       	mov	r23, r22
 80e:	65 2f       	mov	r22, r21
 810:	54 2f       	mov	r21, r20
 812:	43 2f       	mov	r20, r19
 814:	32 2f       	mov	r19, r18
 816:	22 27       	eor	r18, r18
 818:	b8 50       	subi	r27, 0x08	; 8
 81a:	31 f7       	brne	.-52     	; 0x7e8 <__udivmod64+0xe>
 81c:	bf 91       	pop	r27
 81e:	27 c0       	rjmp	.+78     	; 0x86e <__stack+0xf>
 820:	1b 2e       	mov	r1, r27
 822:	bf 91       	pop	r27
 824:	bb 27       	eor	r27, r27
 826:	22 0f       	add	r18, r18
 828:	33 1f       	adc	r19, r19
 82a:	44 1f       	adc	r20, r20
 82c:	55 1f       	adc	r21, r21
 82e:	66 1f       	adc	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	88 1c       	adc	r8, r8
 838:	99 1c       	adc	r9, r9
 83a:	ee 1f       	adc	r30, r30
 83c:	ff 1f       	adc	r31, r31
 83e:	cc 1f       	adc	r28, r28
 840:	dd 1f       	adc	r29, r29
 842:	aa 1f       	adc	r26, r26
 844:	bb 1f       	adc	r27, r27
 846:	8a 14       	cp	r8, r10
 848:	9b 04       	cpc	r9, r11
 84a:	ec 05       	cpc	r30, r12
 84c:	fd 05       	cpc	r31, r13
 84e:	ce 05       	cpc	r28, r14
 850:	df 05       	cpc	r29, r15
 852:	a0 07       	cpc	r26, r16
 854:	b1 07       	cpc	r27, r17
 856:	48 f0       	brcs	.+18     	; 0x86a <__stack+0xb>
 858:	8a 18       	sub	r8, r10
 85a:	9b 08       	sbc	r9, r11
 85c:	ec 09       	sbc	r30, r12
 85e:	fd 09       	sbc	r31, r13
 860:	ce 09       	sbc	r28, r14
 862:	df 09       	sbc	r29, r15
 864:	a0 0b       	sbc	r26, r16
 866:	b1 0b       	sbc	r27, r17
 868:	21 60       	ori	r18, 0x01	; 1
 86a:	1a 94       	dec	r1
 86c:	e1 f6       	brne	.-72     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 86e:	2e f4       	brtc	.+10     	; 0x87a <__stack+0x1b>
 870:	94 01       	movw	r18, r8
 872:	af 01       	movw	r20, r30
 874:	be 01       	movw	r22, r28
 876:	cd 01       	movw	r24, r26
 878:	00 0c       	add	r0, r0
 87a:	08 95       	ret

Disassembly of section .text.libgcc.builtins:

00000de2 <__ashldi3>:
 de2:	0f 93       	push	r16
 de4:	08 30       	cpi	r16, 0x08	; 8
 de6:	90 f0       	brcs	.+36     	; 0xe0c <__ashldi3+0x2a>
 de8:	98 2f       	mov	r25, r24
 dea:	87 2f       	mov	r24, r23
 dec:	76 2f       	mov	r23, r22
 dee:	65 2f       	mov	r22, r21
 df0:	54 2f       	mov	r21, r20
 df2:	43 2f       	mov	r20, r19
 df4:	32 2f       	mov	r19, r18
 df6:	22 27       	eor	r18, r18
 df8:	08 50       	subi	r16, 0x08	; 8
 dfa:	f4 cf       	rjmp	.-24     	; 0xde4 <__ashldi3+0x2>
 dfc:	22 0f       	add	r18, r18
 dfe:	33 1f       	adc	r19, r19
 e00:	44 1f       	adc	r20, r20
 e02:	55 1f       	adc	r21, r21
 e04:	66 1f       	adc	r22, r22
 e06:	77 1f       	adc	r23, r23
 e08:	88 1f       	adc	r24, r24
 e0a:	99 1f       	adc	r25, r25
 e0c:	0a 95       	dec	r16
 e0e:	b2 f7       	brpl	.-20     	; 0xdfc <__ashldi3+0x1a>
 e10:	0f 91       	pop	r16
 e12:	08 95       	ret

Disassembly of section .text.libgcc:

00000f82 <__adddi3>:
 f82:	2a 0d       	add	r18, r10
 f84:	3b 1d       	adc	r19, r11
 f86:	4c 1d       	adc	r20, r12
 f88:	5d 1d       	adc	r21, r13
 f8a:	6e 1d       	adc	r22, r14
 f8c:	7f 1d       	adc	r23, r15
 f8e:	80 1f       	adc	r24, r16
 f90:	91 1f       	adc	r25, r17
 f92:	08 95       	ret

Disassembly of section .text.libgcc:

00000f40 <__cmpdi2_s8>:
 f40:	00 24       	eor	r0, r0
 f42:	a7 fd       	sbrc	r26, 7
 f44:	00 94       	com	r0
 f46:	2a 17       	cp	r18, r26
 f48:	30 05       	cpc	r19, r0
 f4a:	40 05       	cpc	r20, r0
 f4c:	50 05       	cpc	r21, r0
 f4e:	60 05       	cpc	r22, r0
 f50:	70 05       	cpc	r23, r0
 f52:	80 05       	cpc	r24, r0
 f54:	90 05       	cpc	r25, r0
 f56:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000fb4 <_fini>:
 fb4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000fb6 <__funcs_on_exit>:
 fb6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000fb8 <__simulator_exit>:
 fb8:	08 95       	ret

Disassembly of section .text.exit:

00000f58 <exit>:
 f58:	ec 01       	movw	r28, r24
 f5a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__funcs_on_exit>
 f5e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_fini>
 f62:	ce 01       	movw	r24, r28
 f64:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__simulator_exit>
 f68:	ce 01       	movw	r24, r28
 f6a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_Exit>

Disassembly of section .text._Exit:

00000fb0 <_Exit>:
 fb0:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
